<?php
/**
 * Apps_v1beta1Api
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use UniversityOfAdelaide\OpenShift\ApiException;
use UniversityOfAdelaide\OpenShift\Configuration;
use UniversityOfAdelaide\OpenShift\HeaderSelector;
use UniversityOfAdelaide\OpenShift\ObjectSerializer;

/**
 * Apps_v1beta1Api Class Doc Comment
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Apps_v1beta1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAppsV1beta1DeploymentForAllNamespaces
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function createAppsV1beta1DeploymentForAllNamespaces($body, $pretty = null)
    {
        list($response) = $this->createAppsV1beta1DeploymentForAllNamespacesWithHttpInfo($body, $pretty);
        return $response;
    }

    /**
     * Operation createAppsV1beta1DeploymentForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppsV1beta1DeploymentForAllNamespacesWithHttpInfo($body, $pretty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAppsV1beta1DeploymentForAllNamespaces');
        }

        $resourcePath = '/apis/apps/v1beta1/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation createAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function createAppsV1beta1NamespacedDeployment($namespace, $body, $pretty = null)
    {
        list($response) = $this->createAppsV1beta1NamespacedDeploymentWithHttpInfo($namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation createAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppsV1beta1NamespacedDeploymentWithHttpInfo($namespace, $body, $pretty = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling createAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation createAppsV1beta1NamespacedDeploymentRollbackRollback
     *
     * 
     *
     * @param string $name name of the DeploymentRollback (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback
     */
    public function createAppsV1beta1NamespacedDeploymentRollbackRollback($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->createAppsV1beta1NamespacedDeploymentRollbackRollbackWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation createAppsV1beta1NamespacedDeploymentRollbackRollbackWithHttpInfo
     *
     * 
     *
     * @param string $name name of the DeploymentRollback (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppsV1beta1NamespacedDeploymentRollbackRollbackWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createAppsV1beta1NamespacedDeploymentRollbackRollback');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling createAppsV1beta1NamespacedDeploymentRollbackRollback');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAppsV1beta1NamespacedDeploymentRollbackRollback');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentRollback', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation createAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function createAppsV1beta1NamespacedStatefulSet($namespace, $body, $pretty = null)
    {
        list($response) = $this->createAppsV1beta1NamespacedStatefulSetWithHttpInfo($namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation createAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppsV1beta1NamespacedStatefulSetWithHttpInfo($namespace, $body, $pretty = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling createAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation createAppsV1beta1StatefulSetForAllNamespaces
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function createAppsV1beta1StatefulSetForAllNamespaces($body, $pretty = null)
    {
        list($response) = $this->createAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo($body, $pretty);
        return $response;
    }

    /**
     * Operation createAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo($body, $pretty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAppsV1beta1StatefulSetForAllNamespaces');
        }

        $resourcePath = '/apis/apps/v1beta1/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteAppsV1beta1CollectionNamespacedDeployment
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteAppsV1beta1CollectionNamespacedDeployment($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->deleteAppsV1beta1CollectionNamespacedDeploymentWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation deleteAppsV1beta1CollectionNamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAppsV1beta1CollectionNamespacedDeploymentWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAppsV1beta1CollectionNamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteAppsV1beta1CollectionNamespacedStatefulSet
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteAppsV1beta1CollectionNamespacedStatefulSet($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->deleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation deleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAppsV1beta1CollectionNamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteAppsV1beta1NamespacedDeployment($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        list($response) = $this->deleteAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty, $gracePeriodSeconds, $orphanDependents, $propagationPolicy);
        return $response;
    }

    /**
     * Operation deleteAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($gracePeriodSeconds !== null) {
            $queryParams['gracePeriodSeconds'] = ObjectSerializer::toQueryValue($gracePeriodSeconds);
        }
        // query params
        if ($orphanDependents !== null) {
            $queryParams['orphanDependents'] = ObjectSerializer::toQueryValue($orphanDependents);
        }
        // query params
        if ($propagationPolicy !== null) {
            $queryParams['propagationPolicy'] = ObjectSerializer::toQueryValue($propagationPolicy);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteAppsV1beta1NamespacedStatefulSet($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        list($response) = $this->deleteAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty, $gracePeriodSeconds, $orphanDependents, $propagationPolicy);
        return $response;
    }

    /**
     * Operation deleteAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($gracePeriodSeconds !== null) {
            $queryParams['gracePeriodSeconds'] = ObjectSerializer::toQueryValue($gracePeriodSeconds);
        }
        // query params
        if ($orphanDependents !== null) {
            $queryParams['orphanDependents'] = ObjectSerializer::toQueryValue($orphanDependents);
        }
        // query params
        if ($propagationPolicy !== null) {
            $queryParams['propagationPolicy'] = ObjectSerializer::toQueryValue($propagationPolicy);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation getAppsV1beta1APIResources
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList
     */
    public function getAppsV1beta1APIResources()
    {
        list($response) = $this->getAppsV1beta1APIResourcesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAppsV1beta1APIResourcesWithHttpInfo
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppsV1beta1APIResourcesWithHttpInfo()
    {

        $resourcePath = '/apis/apps/v1beta1/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList';



        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listAppsV1beta1DeploymentForAllNamespaces
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList
     */
    public function listAppsV1beta1DeploymentForAllNamespaces($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listAppsV1beta1DeploymentForAllNamespacesWithHttpInfo($pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listAppsV1beta1DeploymentForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAppsV1beta1DeploymentForAllNamespacesWithHttpInfo($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/apps/v1beta1/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList
     */
    public function listAppsV1beta1NamespacedDeployment($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listAppsV1beta1NamespacedDeploymentWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAppsV1beta1NamespacedDeploymentWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling listAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList
     */
    public function listAppsV1beta1NamespacedStatefulSet($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listAppsV1beta1NamespacedStatefulSetWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAppsV1beta1NamespacedStatefulSetWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling listAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listAppsV1beta1StatefulSetForAllNamespaces
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList
     */
    public function listAppsV1beta1StatefulSetForAllNamespaces($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo($pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAppsV1beta1StatefulSetForAllNamespacesWithHttpInfo($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/apps/v1beta1/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSetList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function patchAppsV1beta1NamespacedDeployment($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchAppsV1beta1NamespacedDeploymentStatus
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function patchAppsV1beta1NamespacedDeploymentStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchAppsV1beta1NamespacedDeploymentStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchAppsV1beta1NamespacedDeploymentStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchAppsV1beta1NamespacedDeploymentStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchAppsV1beta1NamespacedDeploymentStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchAppsV1beta1NamespacedScaleScale
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale
     */
    public function patchAppsV1beta1NamespacedScaleScale($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchAppsV1beta1NamespacedScaleScaleWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchAppsV1beta1NamespacedScaleScale');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchAppsV1beta1NamespacedScaleScale');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchAppsV1beta1NamespacedScaleScale');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function patchAppsV1beta1NamespacedStatefulSet($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchAppsV1beta1NamespacedStatefulSetStatus
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function patchAppsV1beta1NamespacedStatefulSetStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchAppsV1beta1NamespacedStatefulSetStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchAppsV1beta1NamespacedStatefulSetStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchAppsV1beta1NamespacedStatefulSetStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function readAppsV1beta1NamespacedDeployment($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        list($response) = $this->readAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $pretty, $exact, $export);
        return $response;
    }

    /**
     * Operation readAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact);
        }
        // query params
        if ($export !== null) {
            $queryParams['export'] = ObjectSerializer::toQueryValue($export);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readAppsV1beta1NamespacedDeploymentStatus
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function readAppsV1beta1NamespacedDeploymentStatus($name, $namespace, $pretty = null)
    {
        list($response) = $this->readAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $pretty);
        return $response;
    }

    /**
     * Operation readAppsV1beta1NamespacedDeploymentStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readAppsV1beta1NamespacedDeploymentStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readAppsV1beta1NamespacedDeploymentStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readAppsV1beta1NamespacedScaleScale
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale
     */
    public function readAppsV1beta1NamespacedScaleScale($name, $namespace, $pretty = null)
    {
        list($response) = $this->readAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $pretty);
        return $response;
    }

    /**
     * Operation readAppsV1beta1NamespacedScaleScaleWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readAppsV1beta1NamespacedScaleScale');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readAppsV1beta1NamespacedScaleScale');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function readAppsV1beta1NamespacedStatefulSet($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        list($response) = $this->readAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $pretty, $exact, $export);
        return $response;
    }

    /**
     * Operation readAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact);
        }
        // query params
        if ($export !== null) {
            $queryParams['export'] = ObjectSerializer::toQueryValue($export);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readAppsV1beta1NamespacedStatefulSetStatus
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function readAppsV1beta1NamespacedStatefulSetStatus($name, $namespace, $pretty = null)
    {
        list($response) = $this->readAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $pretty);
        return $response;
    }

    /**
     * Operation readAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readAppsV1beta1NamespacedStatefulSetStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readAppsV1beta1NamespacedStatefulSetStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function replaceAppsV1beta1NamespacedDeployment($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceAppsV1beta1NamespacedDeploymentStatus
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment
     */
    public function replaceAppsV1beta1NamespacedDeploymentStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceAppsV1beta1NamespacedDeploymentStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppsV1beta1NamespacedDeploymentStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceAppsV1beta1NamespacedDeploymentStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAppsV1beta1NamespacedDeploymentStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceAppsV1beta1NamespacedDeploymentStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Deployment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceAppsV1beta1NamespacedScaleScale
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale
     */
    public function replaceAppsV1beta1NamespacedScaleScale($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceAppsV1beta1NamespacedScaleScaleWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Scale (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1Scale, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppsV1beta1NamespacedScaleScaleWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceAppsV1beta1NamespacedScaleScale');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAppsV1beta1NamespacedScaleScale');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceAppsV1beta1NamespacedScaleScale');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1Scale', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function replaceAppsV1beta1NamespacedStatefulSet($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceAppsV1beta1NamespacedStatefulSetStatus
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet
     */
    public function replaceAppsV1beta1NamespacedStatefulSetStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAppsV1beta1NamespacedStatefulSetStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceAppsV1beta1NamespacedStatefulSetStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAppsV1beta1NamespacedStatefulSetStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceAppsV1beta1NamespacedStatefulSetStatus');
        }

        $resourcePath = '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1beta1StatefulSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1DeploymentListForAllNamespaces
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1DeploymentListForAllNamespaces($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1DeploymentListForAllNamespacesWithHttpInfo($fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1DeploymentListForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1DeploymentListForAllNamespacesWithHttpInfo($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/apps/v1beta1/watch/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1NamespacedDeployment
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1NamespacedDeployment($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1NamespacedDeploymentWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Deployment (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1NamespacedDeploymentWithHttpInfo($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling watchAppsV1beta1NamespacedDeployment');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchAppsV1beta1NamespacedDeployment');
        }

        $resourcePath = '/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1NamespacedDeploymentList
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1NamespacedDeploymentList($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1NamespacedDeploymentListWithHttpInfo($namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1NamespacedDeploymentListWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1NamespacedDeploymentListWithHttpInfo($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchAppsV1beta1NamespacedDeploymentList');
        }

        $resourcePath = '/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1NamespacedStatefulSet
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1NamespacedStatefulSet($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1NamespacedStatefulSetWithHttpInfo
     *
     * 
     *
     * @param string $name name of the StatefulSet (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1NamespacedStatefulSetWithHttpInfo($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling watchAppsV1beta1NamespacedStatefulSet');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchAppsV1beta1NamespacedStatefulSet');
        }

        $resourcePath = '/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1NamespacedStatefulSetList
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1NamespacedStatefulSetList($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1NamespacedStatefulSetListWithHttpInfo($namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1NamespacedStatefulSetListWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1NamespacedStatefulSetListWithHttpInfo($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchAppsV1beta1NamespacedStatefulSetList');
        }

        $resourcePath = '/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchAppsV1beta1StatefulSetListForAllNamespaces
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchAppsV1beta1StatefulSetListForAllNamespaces($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchAppsV1beta1StatefulSetListForAllNamespacesWithHttpInfo($fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchAppsV1beta1StatefulSetListForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchAppsV1beta1StatefulSetListForAllNamespacesWithHttpInfo($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/apps/v1beta1/watch/statefulsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
}
