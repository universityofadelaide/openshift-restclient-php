<?php
/**
 * QuotaOpenshiftIo_v1Api
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Api;

use \UniversityOfAdelaide\OpenShift\ApiClient;
use \UniversityOfAdelaide\OpenShift\ApiException;
use \UniversityOfAdelaide\OpenShift\Configuration;
use \UniversityOfAdelaide\OpenShift\ObjectSerializer;

/**
 * QuotaOpenshiftIo_v1Api Class Doc Comment
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuotaOpenshiftIo_v1Api
{
    /**
     * API Client
     *
     * @var \UniversityOfAdelaide\OpenShift\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \UniversityOfAdelaide\OpenShift\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\UniversityOfAdelaide\OpenShift\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \UniversityOfAdelaide\OpenShift\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \UniversityOfAdelaide\OpenShift\ApiClient $apiClient set the API client
     *
     * @return QuotaOpenshiftIo_v1Api
     */
    public function setApiClient(\UniversityOfAdelaide\OpenShift\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function createQuotaOpenshiftIoV1ClusterResourceQuota($body, $pretty = null)
    {
        list($response) = $this->createQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($body, $pretty);
        return $response;
    }

    /**
     * Operation createQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($body, $pretty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteQuotaOpenshiftIoV1ClusterResourceQuota($name, $body, $pretty = null, $grace_period_seconds = null, $orphan_dependents = null, $propagation_policy = null)
    {
        list($response) = $this->deleteQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty, $grace_period_seconds, $orphan_dependents, $propagation_policy);
        return $response;
    }

    /**
     * Operation deleteQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty = null, $grace_period_seconds = null, $orphan_dependents = null, $propagation_policy = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($grace_period_seconds !== null) {
            $queryParams['gracePeriodSeconds'] = $this->apiClient->getSerializer()->toQueryValue($grace_period_seconds);
        }
        // query params
        if ($orphan_dependents !== null) {
            $queryParams['orphanDependents'] = $this->apiClient->getSerializer()->toQueryValue($orphan_dependents);
        }
        // query params
        if ($propagation_policy !== null) {
            $queryParams['propagationPolicy'] = $this->apiClient->getSerializer()->toQueryValue($propagation_policy);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1Status',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1Status', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota($pretty = null, $field_selector = null, $label_selector = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->deleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaWithHttpInfo($pretty, $field_selector, $label_selector, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation deleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaWithHttpInfo($pretty = null, $field_selector = null, $label_selector = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1Status',
                '/apis/quota.openshift.io/v1/clusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1Status', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuotaOpenshiftIoV1APIResources
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList
     */
    public function getQuotaOpenshiftIoV1APIResources()
    {
        list($response) = $this->getQuotaOpenshiftIoV1APIResourcesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getQuotaOpenshiftIoV1APIResourcesWithHttpInfo
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuotaOpenshiftIoV1APIResourcesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList',
                '/apis/quota.openshift.io/v1/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces
     *
     * 
     *
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList
     */
    public function listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces($field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesWithHttpInfo($field_selector, $label_selector, $pretty, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesWithHttpInfo($field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/appliedclusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList',
                '/apis/quota.openshift.io/v1/appliedclusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuotaList
     */
    public function listQuotaOpenshiftIoV1ClusterResourceQuota($pretty = null, $field_selector = null, $label_selector = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->listQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($pretty, $field_selector, $label_selector, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation listQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuotaList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($pretty = null, $field_selector = null, $label_selector = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuotaList',
                '/apis/quota.openshift.io/v1/clusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuotaList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuotaList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList
     */
    public function listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota($namespace, $field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo($namespace, $field_selector, $label_selector, $pretty, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo($namespace, $field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList',
                '/apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuotaList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function patchQuotaOpenshiftIoV1ClusterResourceQuota($name, $body, $pretty = null)
    {
        list($response) = $this->patchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus($name, $body, $pretty = null)
    {
        list($response) = $this->patchQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function readQuotaOpenshiftIoV1ClusterResourceQuota($name, $pretty = null, $exact = null, $export = null)
    {
        list($response) = $this->readQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $pretty, $exact, $export);
        return $response;
    }

    /**
     * Operation readQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function readQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $pretty = null, $exact = null, $export = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = $this->apiClient->getSerializer()->toQueryValue($exact);
        }
        // query params
        if ($export !== null) {
            $queryParams['export'] = $this->apiClient->getSerializer()->toQueryValue($export);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readQuotaOpenshiftIoV1ClusterResourceQuotaStatus
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function readQuotaOpenshiftIoV1ClusterResourceQuotaStatus($name, $pretty = null)
    {
        list($response) = $this->readQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $pretty);
        return $response;
    }

    /**
     * Operation readQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function readQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readQuotaOpenshiftIoV1ClusterResourceQuotaStatus');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the AppliedClusterResourceQuota (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuota
     */
    public function readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota($name, $namespace, $pretty = null)
    {
        list($response) = $this->readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo($name, $namespace, $pretty);
        return $response;
    }

    /**
     * Operation readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the AppliedClusterResourceQuota (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpInfo($name, $namespace, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuota',
                '/apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1AppliedClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function replaceQuotaOpenshiftIoV1ClusterResourceQuota($name, $body, $pretty = null)
    {
        list($response) = $this->replaceQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota
     */
    public function replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus($name, $body, $pretty = null)
    {
        list($response) = $this->replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpInfo($name, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota',
                '/apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1ClusterResourceQuota', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation watchQuotaOpenshiftIoV1ClusterResourceQuota
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchQuotaOpenshiftIoV1ClusterResourceQuota($name, $field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->watchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $field_selector, $label_selector, $pretty, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation watchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo
     *
     * 
     *
     * @param string $name name of the ClusterResourceQuota (required)
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpInfo($name, $field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling watchQuotaOpenshiftIoV1ClusterResourceQuota');
        }
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/watch/clusterresourcequotas/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent',
                '/apis/quota.openshift.io/v1/watch/clusterresourcequotas/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation watchQuotaOpenshiftIoV1ClusterResourceQuotaList
     *
     * 
     *
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchQuotaOpenshiftIoV1ClusterResourceQuotaList($field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        list($response) = $this->watchQuotaOpenshiftIoV1ClusterResourceQuotaListWithHttpInfo($field_selector, $label_selector, $pretty, $resource_version, $timeout_seconds, $watch);
        return $response;
    }

    /**
     * Operation watchQuotaOpenshiftIoV1ClusterResourceQuotaListWithHttpInfo
     *
     * 
     *
     * @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeout_seconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchQuotaOpenshiftIoV1ClusterResourceQuotaListWithHttpInfo($field_selector = null, $label_selector = null, $pretty = null, $resource_version = null, $timeout_seconds = null, $watch = null)
    {
        // parse inputs
        $resourcePath = "/apis/quota.openshift.io/v1/watch/clusterresourcequotas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // query params
        if ($field_selector !== null) {
            $queryParams['fieldSelector'] = $this->apiClient->getSerializer()->toQueryValue($field_selector);
        }
        // query params
        if ($label_selector !== null) {
            $queryParams['labelSelector'] = $this->apiClient->getSerializer()->toQueryValue($label_selector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = $this->apiClient->getSerializer()->toQueryValue($pretty);
        }
        // query params
        if ($resource_version !== null) {
            $queryParams['resourceVersion'] = $this->apiClient->getSerializer()->toQueryValue($resource_version);
        }
        // query params
        if ($timeout_seconds !== null) {
            $queryParams['timeoutSeconds'] = $this->apiClient->getSerializer()->toQueryValue($timeout_seconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent',
                '/apis/quota.openshift.io/v1/watch/clusterresourcequotas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
