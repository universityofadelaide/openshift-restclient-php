<?php
/**
 * RouteOpenshiftIo_v1Api
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use UniversityOfAdelaide\OpenShift\ApiException;
use UniversityOfAdelaide\OpenShift\Configuration;
use UniversityOfAdelaide\OpenShift\HeaderSelector;
use UniversityOfAdelaide\OpenShift\ObjectSerializer;

/**
 * RouteOpenshiftIo_v1Api Class Doc Comment
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteOpenshiftIo_v1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function createRouteOpenshiftIoV1NamespacedRoute($namespace, $body, $pretty = null)
    {
        list($response) = $this->createRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation createRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($namespace, $body, $pretty = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling createRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation createRouteOpenshiftIoV1RouteForAllNamespaces
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function createRouteOpenshiftIoV1RouteForAllNamespaces($body, $pretty = null)
    {
        list($response) = $this->createRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo($body, $pretty);
        return $response;
    }

    /**
     * Operation createRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo($body, $pretty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createRouteOpenshiftIoV1RouteForAllNamespaces');
        }

        $resourcePath = '/apis/route.openshift.io/v1/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteRouteOpenshiftIoV1CollectionNamespacedRoute
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteRouteOpenshiftIoV1CollectionNamespacedRoute($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->deleteRouteOpenshiftIoV1CollectionNamespacedRouteWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation deleteRouteOpenshiftIoV1CollectionNamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRouteOpenshiftIoV1CollectionNamespacedRouteWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteRouteOpenshiftIoV1CollectionNamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation deleteRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Status
     */
    public function deleteRouteOpenshiftIoV1NamespacedRoute($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        list($response) = $this->deleteRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty, $gracePeriodSeconds, $orphanDependents, $propagationPolicy);
        return $response;
    }

    /**
     * Operation deleteRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1DeleteOptions $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param int $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
     * @param bool $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
     * @param string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Status, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty = null, $gracePeriodSeconds = null, $orphanDependents = null, $propagationPolicy = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Status';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($gracePeriodSeconds !== null) {
            $queryParams['gracePeriodSeconds'] = ObjectSerializer::toQueryValue($gracePeriodSeconds);
        }
        // query params
        if ($orphanDependents !== null) {
            $queryParams['orphanDependents'] = ObjectSerializer::toQueryValue($orphanDependents);
        }
        // query params
        if ($propagationPolicy !== null) {
            $queryParams['propagationPolicy'] = ObjectSerializer::toQueryValue($propagationPolicy);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Status', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation getRouteOpenshiftIoV1APIResources
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList
     */
    public function getRouteOpenshiftIoV1APIResources()
    {
        list($response) = $this->getRouteOpenshiftIoV1APIResourcesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getRouteOpenshiftIoV1APIResourcesWithHttpInfo
     *
     * 
     *
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1APIResourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRouteOpenshiftIoV1APIResourcesWithHttpInfo()
    {

        $resourcePath = '/apis/route.openshift.io/v1/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList';



        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1APIResourceList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1RouteList
     */
    public function listRouteOpenshiftIoV1NamespacedRoute($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($namespace, $pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1RouteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($namespace, $pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling listRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1RouteList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1RouteList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation listRouteOpenshiftIoV1RouteForAllNamespaces
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1RouteList
     */
    public function listRouteOpenshiftIoV1RouteForAllNamespaces($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->listRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo($pretty, $fieldSelector, $labelSelector, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation listRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1RouteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRouteOpenshiftIoV1RouteForAllNamespacesWithHttpInfo($pretty = null, $fieldSelector = null, $labelSelector = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/route.openshift.io/v1/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1RouteList';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1RouteList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function patchRouteOpenshiftIoV1NamespacedRoute($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation patchRouteOpenshiftIoV1NamespacedRouteStatus
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function patchRouteOpenshiftIoV1NamespacedRouteStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->patchRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation patchRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Patch $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling patchRouteOpenshiftIoV1NamespacedRouteStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling patchRouteOpenshiftIoV1NamespacedRouteStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling patchRouteOpenshiftIoV1NamespacedRouteStatus');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function readRouteOpenshiftIoV1NamespacedRoute($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        list($response) = $this->readRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $pretty, $exact, $export);
        return $response;
    }

    /**
     * Operation readRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param bool $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
     * @param bool $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function readRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $pretty = null, $exact = null, $export = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact);
        }
        // query params
        if ($export !== null) {
            $queryParams['export'] = ObjectSerializer::toQueryValue($export);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation readRouteOpenshiftIoV1NamespacedRouteStatus
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function readRouteOpenshiftIoV1NamespacedRouteStatus($name, $namespace, $pretty = null)
    {
        list($response) = $this->readRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $pretty);
        return $response;
    }

    /**
     * Operation readRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function readRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling readRouteOpenshiftIoV1NamespacedRouteStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling readRouteOpenshiftIoV1NamespacedRouteStatus');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function replaceRouteOpenshiftIoV1NamespacedRoute($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation replaceRouteOpenshiftIoV1NamespacedRouteStatus
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Route
     */
    public function replaceRouteOpenshiftIoV1NamespacedRouteStatus($name, $namespace, $body, $pretty = null)
    {
        list($response) = $this->replaceRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $body, $pretty);
        return $response;
    }

    /**
     * Operation replaceRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Route $body  (required)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1Route, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceRouteOpenshiftIoV1NamespacedRouteStatusWithHttpInfo($name, $namespace, $body, $pretty = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceRouteOpenshiftIoV1NamespacedRouteStatus');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceRouteOpenshiftIoV1NamespacedRouteStatus');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceRouteOpenshiftIoV1NamespacedRouteStatus');
        }

        $resourcePath = '/apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1Route';

        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1Route', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchRouteOpenshiftIoV1NamespacedRoute
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchRouteOpenshiftIoV1NamespacedRoute($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo
     *
     * 
     *
     * @param string $name name of the Route (required)
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchRouteOpenshiftIoV1NamespacedRouteWithHttpInfo($name, $namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling watchRouteOpenshiftIoV1NamespacedRoute');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchRouteOpenshiftIoV1NamespacedRoute');
        }

        $resourcePath = '/apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchRouteOpenshiftIoV1NamespacedRouteList
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchRouteOpenshiftIoV1NamespacedRouteList($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchRouteOpenshiftIoV1NamespacedRouteListWithHttpInfo($namespace, $fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchRouteOpenshiftIoV1NamespacedRouteListWithHttpInfo
     *
     * 
     *
     * @param string $namespace object name and auth scope, such as for teams and projects (required)
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchRouteOpenshiftIoV1NamespacedRouteListWithHttpInfo($namespace, $fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling watchRouteOpenshiftIoV1NamespacedRouteList');
        }

        $resourcePath = '/apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace('{' . 'namespace' . '}', ObjectSerializer::toPathValue($namespace), $resourcePath);
        }

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
    /**
     * Operation watchRouteOpenshiftIoV1RouteListForAllNamespaces
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent
     */
    public function watchRouteOpenshiftIoV1RouteListForAllNamespaces($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {
        list($response) = $this->watchRouteOpenshiftIoV1RouteListForAllNamespacesWithHttpInfo($fieldSelector, $labelSelector, $pretty, $resourceVersion, $timeoutSeconds, $watch);
        return $response;
    }

    /**
     * Operation watchRouteOpenshiftIoV1RouteListForAllNamespacesWithHttpInfo
     *
     * 
     *
     * @param string $fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
     * @param string $labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
     * @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param string $resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
     * @param int $timeoutSeconds Timeout for the list/watch call. (optional)
     * @param bool $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
     * @throws \UniversityOfAdelaide\OpenShift\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UniversityOfAdelaide\OpenShift\Model\V1WatchEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function watchRouteOpenshiftIoV1RouteListForAllNamespacesWithHttpInfo($fieldSelector = null, $labelSelector = null, $pretty = null, $resourceVersion = null, $timeoutSeconds = null, $watch = null)
    {

        $resourcePath = '/apis/route.openshift.io/v1/watch/routes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $returnType = '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent';

        // query params
        if ($fieldSelector !== null) {
            $queryParams['fieldSelector'] = ObjectSerializer::toQueryValue($fieldSelector);
        }
        // query params
        if ($labelSelector !== null) {
            $queryParams['labelSelector'] = ObjectSerializer::toQueryValue($labelSelector);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }
        // query params
        if ($resourceVersion !== null) {
            $queryParams['resourceVersion'] = ObjectSerializer::toQueryValue($resourceVersion);
        }
        // query params
        if ($timeoutSeconds !== null) {
            $queryParams['timeoutSeconds'] = ObjectSerializer::toQueryValue($timeoutSeconds);
        }
        // query params
        if ($watch !== null) {
            $queryParams['watch'] = ObjectSerializer::toQueryValue($watch);
        }


        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        if ($httpBody instanceof MultipartStream) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'],
                ['*/*']
            );
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $request = new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ($url)",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\UniversityOfAdelaide\OpenShift\Model\V1WatchEvent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
}
