<?php
/**
 * V1SecurityContextConstraints
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1SecurityContextConstraints Class Doc Comment
 *
 * @category    Class
 * @description SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1SecurityContextConstraints implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.SecurityContextConstraints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_host_dir_volume_plugin' => 'bool',
        'allow_host_ipc' => 'bool',
        'allow_host_network' => 'bool',
        'allow_host_pid' => 'bool',
        'allow_host_ports' => 'bool',
        'allow_privileged_container' => 'bool',
        'allowed_capabilities' => 'string[]',
        'api_version' => 'string',
        'default_add_capabilities' => 'string[]',
        'fs_group' => '\UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions',
        'groups' => 'string[]',
        'kind' => 'string',
        'metadata' => '\UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta',
        'priority' => 'int',
        'read_only_root_filesystem' => 'bool',
        'required_drop_capabilities' => 'string[]',
        'run_as_user' => '\UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions',
        'se_linux_context' => '\UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions',
        'seccomp_profiles' => 'string[]',
        'supplemental_groups' => '\UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions',
        'users' => 'string[]',
        'volumes' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_host_dir_volume_plugin' => 'allowHostDirVolumePlugin',
        'allow_host_ipc' => 'allowHostIPC',
        'allow_host_network' => 'allowHostNetwork',
        'allow_host_pid' => 'allowHostPID',
        'allow_host_ports' => 'allowHostPorts',
        'allow_privileged_container' => 'allowPrivilegedContainer',
        'allowed_capabilities' => 'allowedCapabilities',
        'api_version' => 'apiVersion',
        'default_add_capabilities' => 'defaultAddCapabilities',
        'fs_group' => 'fsGroup',
        'groups' => 'groups',
        'kind' => 'kind',
        'metadata' => 'metadata',
        'priority' => 'priority',
        'read_only_root_filesystem' => 'readOnlyRootFilesystem',
        'required_drop_capabilities' => 'requiredDropCapabilities',
        'run_as_user' => 'runAsUser',
        'se_linux_context' => 'seLinuxContext',
        'seccomp_profiles' => 'seccompProfiles',
        'supplemental_groups' => 'supplementalGroups',
        'users' => 'users',
        'volumes' => 'volumes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'allow_host_dir_volume_plugin' => 'setAllowHostDirVolumePlugin',
        'allow_host_ipc' => 'setAllowHostIpc',
        'allow_host_network' => 'setAllowHostNetwork',
        'allow_host_pid' => 'setAllowHostPid',
        'allow_host_ports' => 'setAllowHostPorts',
        'allow_privileged_container' => 'setAllowPrivilegedContainer',
        'allowed_capabilities' => 'setAllowedCapabilities',
        'api_version' => 'setApiVersion',
        'default_add_capabilities' => 'setDefaultAddCapabilities',
        'fs_group' => 'setFsGroup',
        'groups' => 'setGroups',
        'kind' => 'setKind',
        'metadata' => 'setMetadata',
        'priority' => 'setPriority',
        'read_only_root_filesystem' => 'setReadOnlyRootFilesystem',
        'required_drop_capabilities' => 'setRequiredDropCapabilities',
        'run_as_user' => 'setRunAsUser',
        'se_linux_context' => 'setSeLinuxContext',
        'seccomp_profiles' => 'setSeccompProfiles',
        'supplemental_groups' => 'setSupplementalGroups',
        'users' => 'setUsers',
        'volumes' => 'setVolumes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'allow_host_dir_volume_plugin' => 'getAllowHostDirVolumePlugin',
        'allow_host_ipc' => 'getAllowHostIpc',
        'allow_host_network' => 'getAllowHostNetwork',
        'allow_host_pid' => 'getAllowHostPid',
        'allow_host_ports' => 'getAllowHostPorts',
        'allow_privileged_container' => 'getAllowPrivilegedContainer',
        'allowed_capabilities' => 'getAllowedCapabilities',
        'api_version' => 'getApiVersion',
        'default_add_capabilities' => 'getDefaultAddCapabilities',
        'fs_group' => 'getFsGroup',
        'groups' => 'getGroups',
        'kind' => 'getKind',
        'metadata' => 'getMetadata',
        'priority' => 'getPriority',
        'read_only_root_filesystem' => 'getReadOnlyRootFilesystem',
        'required_drop_capabilities' => 'getRequiredDropCapabilities',
        'run_as_user' => 'getRunAsUser',
        'se_linux_context' => 'getSeLinuxContext',
        'seccomp_profiles' => 'getSeccompProfiles',
        'supplemental_groups' => 'getSupplementalGroups',
        'users' => 'getUsers',
        'volumes' => 'getVolumes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_host_dir_volume_plugin'] = isset($data['allow_host_dir_volume_plugin']) ? $data['allow_host_dir_volume_plugin'] : null;
        $this->container['allow_host_ipc'] = isset($data['allow_host_ipc']) ? $data['allow_host_ipc'] : null;
        $this->container['allow_host_network'] = isset($data['allow_host_network']) ? $data['allow_host_network'] : null;
        $this->container['allow_host_pid'] = isset($data['allow_host_pid']) ? $data['allow_host_pid'] : null;
        $this->container['allow_host_ports'] = isset($data['allow_host_ports']) ? $data['allow_host_ports'] : null;
        $this->container['allow_privileged_container'] = isset($data['allow_privileged_container']) ? $data['allow_privileged_container'] : null;
        $this->container['allowed_capabilities'] = isset($data['allowed_capabilities']) ? $data['allowed_capabilities'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['default_add_capabilities'] = isset($data['default_add_capabilities']) ? $data['default_add_capabilities'] : null;
        $this->container['fs_group'] = isset($data['fs_group']) ? $data['fs_group'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['read_only_root_filesystem'] = isset($data['read_only_root_filesystem']) ? $data['read_only_root_filesystem'] : null;
        $this->container['required_drop_capabilities'] = isset($data['required_drop_capabilities']) ? $data['required_drop_capabilities'] : null;
        $this->container['run_as_user'] = isset($data['run_as_user']) ? $data['run_as_user'] : null;
        $this->container['se_linux_context'] = isset($data['se_linux_context']) ? $data['se_linux_context'] : null;
        $this->container['seccomp_profiles'] = isset($data['seccomp_profiles']) ? $data['seccomp_profiles'] : null;
        $this->container['supplemental_groups'] = isset($data['supplemental_groups']) ? $data['supplemental_groups'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['allow_host_dir_volume_plugin'] === null) {
            $invalid_properties[] = "'allow_host_dir_volume_plugin' can't be null";
        }
        if ($this->container['allow_host_ipc'] === null) {
            $invalid_properties[] = "'allow_host_ipc' can't be null";
        }
        if ($this->container['allow_host_network'] === null) {
            $invalid_properties[] = "'allow_host_network' can't be null";
        }
        if ($this->container['allow_host_pid'] === null) {
            $invalid_properties[] = "'allow_host_pid' can't be null";
        }
        if ($this->container['allow_host_ports'] === null) {
            $invalid_properties[] = "'allow_host_ports' can't be null";
        }
        if ($this->container['allow_privileged_container'] === null) {
            $invalid_properties[] = "'allow_privileged_container' can't be null";
        }
        if ($this->container['allowed_capabilities'] === null) {
            $invalid_properties[] = "'allowed_capabilities' can't be null";
        }
        if ($this->container['default_add_capabilities'] === null) {
            $invalid_properties[] = "'default_add_capabilities' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalid_properties[] = "'priority' can't be null";
        }
        if ($this->container['read_only_root_filesystem'] === null) {
            $invalid_properties[] = "'read_only_root_filesystem' can't be null";
        }
        if ($this->container['required_drop_capabilities'] === null) {
            $invalid_properties[] = "'required_drop_capabilities' can't be null";
        }
        if ($this->container['volumes'] === null) {
            $invalid_properties[] = "'volumes' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['allow_host_dir_volume_plugin'] === null) {
            return false;
        }
        if ($this->container['allow_host_ipc'] === null) {
            return false;
        }
        if ($this->container['allow_host_network'] === null) {
            return false;
        }
        if ($this->container['allow_host_pid'] === null) {
            return false;
        }
        if ($this->container['allow_host_ports'] === null) {
            return false;
        }
        if ($this->container['allow_privileged_container'] === null) {
            return false;
        }
        if ($this->container['allowed_capabilities'] === null) {
            return false;
        }
        if ($this->container['default_add_capabilities'] === null) {
            return false;
        }
        if ($this->container['priority'] === null) {
            return false;
        }
        if ($this->container['read_only_root_filesystem'] === null) {
            return false;
        }
        if ($this->container['required_drop_capabilities'] === null) {
            return false;
        }
        if ($this->container['volumes'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allow_host_dir_volume_plugin
     * @return bool
     */
    public function getAllowHostDirVolumePlugin()
    {
        return $this->container['allow_host_dir_volume_plugin'];
    }

    /**
     * Sets allow_host_dir_volume_plugin
     * @param bool $allow_host_dir_volume_plugin AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
     * @return $this
     */
    public function setAllowHostDirVolumePlugin($allow_host_dir_volume_plugin)
    {
        $this->container['allow_host_dir_volume_plugin'] = $allow_host_dir_volume_plugin;

        return $this;
    }

    /**
     * Gets allow_host_ipc
     * @return bool
     */
    public function getAllowHostIpc()
    {
        return $this->container['allow_host_ipc'];
    }

    /**
     * Sets allow_host_ipc
     * @param bool $allow_host_ipc AllowHostIPC determines if the policy allows host ipc in the containers.
     * @return $this
     */
    public function setAllowHostIpc($allow_host_ipc)
    {
        $this->container['allow_host_ipc'] = $allow_host_ipc;

        return $this;
    }

    /**
     * Gets allow_host_network
     * @return bool
     */
    public function getAllowHostNetwork()
    {
        return $this->container['allow_host_network'];
    }

    /**
     * Sets allow_host_network
     * @param bool $allow_host_network AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * @return $this
     */
    public function setAllowHostNetwork($allow_host_network)
    {
        $this->container['allow_host_network'] = $allow_host_network;

        return $this;
    }

    /**
     * Gets allow_host_pid
     * @return bool
     */
    public function getAllowHostPid()
    {
        return $this->container['allow_host_pid'];
    }

    /**
     * Sets allow_host_pid
     * @param bool $allow_host_pid AllowHostPID determines if the policy allows host pid in the containers.
     * @return $this
     */
    public function setAllowHostPid($allow_host_pid)
    {
        $this->container['allow_host_pid'] = $allow_host_pid;

        return $this;
    }

    /**
     * Gets allow_host_ports
     * @return bool
     */
    public function getAllowHostPorts()
    {
        return $this->container['allow_host_ports'];
    }

    /**
     * Sets allow_host_ports
     * @param bool $allow_host_ports AllowHostPorts determines if the policy allows host ports in the containers.
     * @return $this
     */
    public function setAllowHostPorts($allow_host_ports)
    {
        $this->container['allow_host_ports'] = $allow_host_ports;

        return $this;
    }

    /**
     * Gets allow_privileged_container
     * @return bool
     */
    public function getAllowPrivilegedContainer()
    {
        return $this->container['allow_privileged_container'];
    }

    /**
     * Sets allow_privileged_container
     * @param bool $allow_privileged_container AllowPrivilegedContainer determines if a container can request to be run as privileged.
     * @return $this
     */
    public function setAllowPrivilegedContainer($allow_privileged_container)
    {
        $this->container['allow_privileged_container'] = $allow_privileged_container;

        return $this;
    }

    /**
     * Gets allowed_capabilities
     * @return string[]
     */
    public function getAllowedCapabilities()
    {
        return $this->container['allowed_capabilities'];
    }

    /**
     * Sets allowed_capabilities
     * @param string[] $allowed_capabilities AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'.
     * @return $this
     */
    public function setAllowedCapabilities($allowed_capabilities)
    {
        $this->container['allowed_capabilities'] = $allowed_capabilities;

        return $this;
    }

    /**
     * Gets api_version
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param string $api_version APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets default_add_capabilities
     * @return string[]
     */
    public function getDefaultAddCapabilities()
    {
        return $this->container['default_add_capabilities'];
    }

    /**
     * Sets default_add_capabilities
     * @param string[] $default_add_capabilities DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
     * @return $this
     */
    public function setDefaultAddCapabilities($default_add_capabilities)
    {
        $this->container['default_add_capabilities'] = $default_add_capabilities;

        return $this;
    }

    /**
     * Gets fs_group
     * @return \UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions
     */
    public function getFsGroup()
    {
        return $this->container['fs_group'];
    }

    /**
     * Sets fs_group
     * @param \UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions $fs_group FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * @return $this
     */
    public function setFsGroup($fs_group)
    {
        $this->container['fs_group'] = $fs_group;

        return $this;
    }

    /**
     * Gets groups
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param string[] $groups The groups that have permission to use this security context constraints
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets kind
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     * @param string $kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets metadata
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta $metadata Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority.  If scores for multiple SCCs are equal they will be sorted by name.
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets read_only_root_filesystem
     * @return bool
     */
    public function getReadOnlyRootFilesystem()
    {
        return $this->container['read_only_root_filesystem'];
    }

    /**
     * Sets read_only_root_filesystem
     * @param bool $read_only_root_filesystem ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * @return $this
     */
    public function setReadOnlyRootFilesystem($read_only_root_filesystem)
    {
        $this->container['read_only_root_filesystem'] = $read_only_root_filesystem;

        return $this;
    }

    /**
     * Gets required_drop_capabilities
     * @return string[]
     */
    public function getRequiredDropCapabilities()
    {
        return $this->container['required_drop_capabilities'];
    }

    /**
     * Sets required_drop_capabilities
     * @param string[] $required_drop_capabilities RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * @return $this
     */
    public function setRequiredDropCapabilities($required_drop_capabilities)
    {
        $this->container['required_drop_capabilities'] = $required_drop_capabilities;

        return $this;
    }

    /**
     * Gets run_as_user
     * @return \UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions
     */
    public function getRunAsUser()
    {
        return $this->container['run_as_user'];
    }

    /**
     * Sets run_as_user
     * @param \UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions $run_as_user RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext.
     * @return $this
     */
    public function setRunAsUser($run_as_user)
    {
        $this->container['run_as_user'] = $run_as_user;

        return $this;
    }

    /**
     * Gets se_linux_context
     * @return \UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions
     */
    public function getSeLinuxContext()
    {
        return $this->container['se_linux_context'];
    }

    /**
     * Sets se_linux_context
     * @param \UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions $se_linux_context SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext.
     * @return $this
     */
    public function setSeLinuxContext($se_linux_context)
    {
        $this->container['se_linux_context'] = $se_linux_context;

        return $this;
    }

    /**
     * Gets seccomp_profiles
     * @return string[]
     */
    public function getSeccompProfiles()
    {
        return $this->container['seccomp_profiles'];
    }

    /**
     * Sets seccomp_profiles
     * @param string[] $seccomp_profiles SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container. The wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.
     * @return $this
     */
    public function setSeccompProfiles($seccomp_profiles)
    {
        $this->container['seccomp_profiles'] = $seccomp_profiles;

        return $this;
    }

    /**
     * Gets supplemental_groups
     * @return \UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions
     */
    public function getSupplementalGroups()
    {
        return $this->container['supplemental_groups'];
    }

    /**
     * Sets supplemental_groups
     * @param \UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions $supplemental_groups SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * @return $this
     */
    public function setSupplementalGroups($supplemental_groups)
    {
        $this->container['supplemental_groups'] = $supplemental_groups;

        return $this;
    }

    /**
     * Gets users
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     * @param string[] $users The users who have permissions to use this security context constraints
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets volumes
     * @return string[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     * @param string[] $volumes Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use '*'.
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


