<?php
/**
 * V1SecurityContextConstraints
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1SecurityContextConstraints Class Doc Comment
 *
 * @category    Class
 * @description SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1SecurityContextConstraints implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.SecurityContextConstraints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowHostDirVolumePlugin' => 'bool',
        'allowHostIPC' => 'bool',
        'allowHostNetwork' => 'bool',
        'allowHostPID' => 'bool',
        'allowHostPorts' => 'bool',
        'allowPrivilegedContainer' => 'bool',
        'allowedCapabilities' => 'string[]',
        'apiVersion' => 'string',
        'defaultAddCapabilities' => 'string[]',
        'fsGroup' => '\UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions',
        'groups' => 'string[]',
        'kind' => 'string',
        'metadata' => '\UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta',
        'priority' => 'int',
        'readOnlyRootFilesystem' => 'bool',
        'requiredDropCapabilities' => 'string[]',
        'runAsUser' => '\UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions',
        'seLinuxContext' => '\UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions',
        'seccompProfiles' => 'string[]',
        'supplementalGroups' => '\UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions',
        'users' => 'string[]',
        'volumes' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'allowHostDirVolumePlugin' => 'allowHostDirVolumePlugin',
        'allowHostIPC' => 'allowHostIPC',
        'allowHostNetwork' => 'allowHostNetwork',
        'allowHostPID' => 'allowHostPID',
        'allowHostPorts' => 'allowHostPorts',
        'allowPrivilegedContainer' => 'allowPrivilegedContainer',
        'allowedCapabilities' => 'allowedCapabilities',
        'apiVersion' => 'apiVersion',
        'defaultAddCapabilities' => 'defaultAddCapabilities',
        'fsGroup' => 'fsGroup',
        'groups' => 'groups',
        'kind' => 'kind',
        'metadata' => 'metadata',
        'priority' => 'priority',
        'readOnlyRootFilesystem' => 'readOnlyRootFilesystem',
        'requiredDropCapabilities' => 'requiredDropCapabilities',
        'runAsUser' => 'runAsUser',
        'seLinuxContext' => 'seLinuxContext',
        'seccompProfiles' => 'seccompProfiles',
        'supplementalGroups' => 'supplementalGroups',
        'users' => 'users',
        'volumes' => 'volumes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'allowHostDirVolumePlugin' => 'setAllowHostDirVolumePlugin',
        'allowHostIPC' => 'setAllowHostIPC',
        'allowHostNetwork' => 'setAllowHostNetwork',
        'allowHostPID' => 'setAllowHostPID',
        'allowHostPorts' => 'setAllowHostPorts',
        'allowPrivilegedContainer' => 'setAllowPrivilegedContainer',
        'allowedCapabilities' => 'setAllowedCapabilities',
        'apiVersion' => 'setApiVersion',
        'defaultAddCapabilities' => 'setDefaultAddCapabilities',
        'fsGroup' => 'setFsGroup',
        'groups' => 'setGroups',
        'kind' => 'setKind',
        'metadata' => 'setMetadata',
        'priority' => 'setPriority',
        'readOnlyRootFilesystem' => 'setReadOnlyRootFilesystem',
        'requiredDropCapabilities' => 'setRequiredDropCapabilities',
        'runAsUser' => 'setRunAsUser',
        'seLinuxContext' => 'setSeLinuxContext',
        'seccompProfiles' => 'setSeccompProfiles',
        'supplementalGroups' => 'setSupplementalGroups',
        'users' => 'setUsers',
        'volumes' => 'setVolumes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'allowHostDirVolumePlugin' => 'getAllowHostDirVolumePlugin',
        'allowHostIPC' => 'getAllowHostIPC',
        'allowHostNetwork' => 'getAllowHostNetwork',
        'allowHostPID' => 'getAllowHostPID',
        'allowHostPorts' => 'getAllowHostPorts',
        'allowPrivilegedContainer' => 'getAllowPrivilegedContainer',
        'allowedCapabilities' => 'getAllowedCapabilities',
        'apiVersion' => 'getApiVersion',
        'defaultAddCapabilities' => 'getDefaultAddCapabilities',
        'fsGroup' => 'getFsGroup',
        'groups' => 'getGroups',
        'kind' => 'getKind',
        'metadata' => 'getMetadata',
        'priority' => 'getPriority',
        'readOnlyRootFilesystem' => 'getReadOnlyRootFilesystem',
        'requiredDropCapabilities' => 'getRequiredDropCapabilities',
        'runAsUser' => 'getRunAsUser',
        'seLinuxContext' => 'getSeLinuxContext',
        'seccompProfiles' => 'getSeccompProfiles',
        'supplementalGroups' => 'getSupplementalGroups',
        'users' => 'getUsers',
        'volumes' => 'getVolumes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowHostDirVolumePlugin'] = isset($data['allowHostDirVolumePlugin']) ? $data['allowHostDirVolumePlugin'] : null;
        $this->container['allowHostIPC'] = isset($data['allowHostIPC']) ? $data['allowHostIPC'] : null;
        $this->container['allowHostNetwork'] = isset($data['allowHostNetwork']) ? $data['allowHostNetwork'] : null;
        $this->container['allowHostPID'] = isset($data['allowHostPID']) ? $data['allowHostPID'] : null;
        $this->container['allowHostPorts'] = isset($data['allowHostPorts']) ? $data['allowHostPorts'] : null;
        $this->container['allowPrivilegedContainer'] = isset($data['allowPrivilegedContainer']) ? $data['allowPrivilegedContainer'] : null;
        $this->container['allowedCapabilities'] = isset($data['allowedCapabilities']) ? $data['allowedCapabilities'] : null;
        $this->container['apiVersion'] = isset($data['apiVersion']) ? $data['apiVersion'] : null;
        $this->container['defaultAddCapabilities'] = isset($data['defaultAddCapabilities']) ? $data['defaultAddCapabilities'] : null;
        $this->container['fsGroup'] = isset($data['fsGroup']) ? $data['fsGroup'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['readOnlyRootFilesystem'] = isset($data['readOnlyRootFilesystem']) ? $data['readOnlyRootFilesystem'] : null;
        $this->container['requiredDropCapabilities'] = isset($data['requiredDropCapabilities']) ? $data['requiredDropCapabilities'] : null;
        $this->container['runAsUser'] = isset($data['runAsUser']) ? $data['runAsUser'] : null;
        $this->container['seLinuxContext'] = isset($data['seLinuxContext']) ? $data['seLinuxContext'] : null;
        $this->container['seccompProfiles'] = isset($data['seccompProfiles']) ? $data['seccompProfiles'] : null;
        $this->container['supplementalGroups'] = isset($data['supplementalGroups']) ? $data['supplementalGroups'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['allowHostDirVolumePlugin'] === null) {
            $invalid_properties[] = "'allowHostDirVolumePlugin' can't be null";
        }
        if ($this->container['allowHostIPC'] === null) {
            $invalid_properties[] = "'allowHostIPC' can't be null";
        }
        if ($this->container['allowHostNetwork'] === null) {
            $invalid_properties[] = "'allowHostNetwork' can't be null";
        }
        if ($this->container['allowHostPID'] === null) {
            $invalid_properties[] = "'allowHostPID' can't be null";
        }
        if ($this->container['allowHostPorts'] === null) {
            $invalid_properties[] = "'allowHostPorts' can't be null";
        }
        if ($this->container['allowPrivilegedContainer'] === null) {
            $invalid_properties[] = "'allowPrivilegedContainer' can't be null";
        }
        if ($this->container['allowedCapabilities'] === null) {
            $invalid_properties[] = "'allowedCapabilities' can't be null";
        }
        if ($this->container['defaultAddCapabilities'] === null) {
            $invalid_properties[] = "'defaultAddCapabilities' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalid_properties[] = "'priority' can't be null";
        }
        if ($this->container['readOnlyRootFilesystem'] === null) {
            $invalid_properties[] = "'readOnlyRootFilesystem' can't be null";
        }
        if ($this->container['requiredDropCapabilities'] === null) {
            $invalid_properties[] = "'requiredDropCapabilities' can't be null";
        }
        if ($this->container['volumes'] === null) {
            $invalid_properties[] = "'volumes' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['allowHostDirVolumePlugin'] === null) {
            return false;
        }
        if ($this->container['allowHostIPC'] === null) {
            return false;
        }
        if ($this->container['allowHostNetwork'] === null) {
            return false;
        }
        if ($this->container['allowHostPID'] === null) {
            return false;
        }
        if ($this->container['allowHostPorts'] === null) {
            return false;
        }
        if ($this->container['allowPrivilegedContainer'] === null) {
            return false;
        }
        if ($this->container['allowedCapabilities'] === null) {
            return false;
        }
        if ($this->container['defaultAddCapabilities'] === null) {
            return false;
        }
        if ($this->container['priority'] === null) {
            return false;
        }
        if ($this->container['readOnlyRootFilesystem'] === null) {
            return false;
        }
        if ($this->container['requiredDropCapabilities'] === null) {
            return false;
        }
        if ($this->container['volumes'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allowHostDirVolumePlugin
     * @return bool
     */
    public function getAllowHostDirVolumePlugin()
    {
        return $this->container['allowHostDirVolumePlugin'];
    }

    /**
     * Sets allowHostDirVolumePlugin
     * @param bool $allowHostDirVolumePlugin AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
     * @return $this
     */
    public function setAllowHostDirVolumePlugin($allowHostDirVolumePlugin)
    {
        $this->container['allowHostDirVolumePlugin'] = $allowHostDirVolumePlugin;

        return $this;
    }

    /**
     * Gets allowHostIPC
     * @return bool
     */
    public function getAllowHostIPC()
    {
        return $this->container['allowHostIPC'];
    }

    /**
     * Sets allowHostIPC
     * @param bool $allowHostIPC AllowHostIPC determines if the policy allows host ipc in the containers.
     * @return $this
     */
    public function setAllowHostIPC($allowHostIPC)
    {
        $this->container['allowHostIPC'] = $allowHostIPC;

        return $this;
    }

    /**
     * Gets allowHostNetwork
     * @return bool
     */
    public function getAllowHostNetwork()
    {
        return $this->container['allowHostNetwork'];
    }

    /**
     * Sets allowHostNetwork
     * @param bool $allowHostNetwork AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * @return $this
     */
    public function setAllowHostNetwork($allowHostNetwork)
    {
        $this->container['allowHostNetwork'] = $allowHostNetwork;

        return $this;
    }

    /**
     * Gets allowHostPID
     * @return bool
     */
    public function getAllowHostPID()
    {
        return $this->container['allowHostPID'];
    }

    /**
     * Sets allowHostPID
     * @param bool $allowHostPID AllowHostPID determines if the policy allows host pid in the containers.
     * @return $this
     */
    public function setAllowHostPID($allowHostPID)
    {
        $this->container['allowHostPID'] = $allowHostPID;

        return $this;
    }

    /**
     * Gets allowHostPorts
     * @return bool
     */
    public function getAllowHostPorts()
    {
        return $this->container['allowHostPorts'];
    }

    /**
     * Sets allowHostPorts
     * @param bool $allowHostPorts AllowHostPorts determines if the policy allows host ports in the containers.
     * @return $this
     */
    public function setAllowHostPorts($allowHostPorts)
    {
        $this->container['allowHostPorts'] = $allowHostPorts;

        return $this;
    }

    /**
     * Gets allowPrivilegedContainer
     * @return bool
     */
    public function getAllowPrivilegedContainer()
    {
        return $this->container['allowPrivilegedContainer'];
    }

    /**
     * Sets allowPrivilegedContainer
     * @param bool $allowPrivilegedContainer AllowPrivilegedContainer determines if a container can request to be run as privileged.
     * @return $this
     */
    public function setAllowPrivilegedContainer($allowPrivilegedContainer)
    {
        $this->container['allowPrivilegedContainer'] = $allowPrivilegedContainer;

        return $this;
    }

    /**
     * Gets allowedCapabilities
     * @return string[]
     */
    public function getAllowedCapabilities()
    {
        return $this->container['allowedCapabilities'];
    }

    /**
     * Sets allowedCapabilities
     * @param string[] $allowedCapabilities AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'.
     * @return $this
     */
    public function setAllowedCapabilities($allowedCapabilities)
    {
        $this->container['allowedCapabilities'] = $allowedCapabilities;

        return $this;
    }

    /**
     * Gets apiVersion
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     * @param string $apiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources
     * @return $this
     */
    public function setApiVersion($apiVersion)
    {
        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets defaultAddCapabilities
     * @return string[]
     */
    public function getDefaultAddCapabilities()
    {
        return $this->container['defaultAddCapabilities'];
    }

    /**
     * Sets defaultAddCapabilities
     * @param string[] $defaultAddCapabilities DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
     * @return $this
     */
    public function setDefaultAddCapabilities($defaultAddCapabilities)
    {
        $this->container['defaultAddCapabilities'] = $defaultAddCapabilities;

        return $this;
    }

    /**
     * Gets fsGroup
     * @return \UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions
     */
    public function getFsGroup()
    {
        return $this->container['fsGroup'];
    }

    /**
     * Sets fsGroup
     * @param \UniversityOfAdelaide\OpenShift\Model\V1FSGroupStrategyOptions $fsGroup FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * @return $this
     */
    public function setFsGroup($fsGroup)
    {
        $this->container['fsGroup'] = $fsGroup;

        return $this;
    }

    /**
     * Gets groups
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param string[] $groups The groups that have permission to use this security context constraints
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets kind
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     * @param string $kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets metadata
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ObjectMeta $metadata Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority.  If scores for multiple SCCs are equal they will be sorted by name.
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets readOnlyRootFilesystem
     * @return bool
     */
    public function getReadOnlyRootFilesystem()
    {
        return $this->container['readOnlyRootFilesystem'];
    }

    /**
     * Sets readOnlyRootFilesystem
     * @param bool $readOnlyRootFilesystem ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * @return $this
     */
    public function setReadOnlyRootFilesystem($readOnlyRootFilesystem)
    {
        $this->container['readOnlyRootFilesystem'] = $readOnlyRootFilesystem;

        return $this;
    }

    /**
     * Gets requiredDropCapabilities
     * @return string[]
     */
    public function getRequiredDropCapabilities()
    {
        return $this->container['requiredDropCapabilities'];
    }

    /**
     * Sets requiredDropCapabilities
     * @param string[] $requiredDropCapabilities RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * @return $this
     */
    public function setRequiredDropCapabilities($requiredDropCapabilities)
    {
        $this->container['requiredDropCapabilities'] = $requiredDropCapabilities;

        return $this;
    }

    /**
     * Gets runAsUser
     * @return \UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions
     */
    public function getRunAsUser()
    {
        return $this->container['runAsUser'];
    }

    /**
     * Sets runAsUser
     * @param \UniversityOfAdelaide\OpenShift\Model\V1RunAsUserStrategyOptions $runAsUser RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext.
     * @return $this
     */
    public function setRunAsUser($runAsUser)
    {
        $this->container['runAsUser'] = $runAsUser;

        return $this;
    }

    /**
     * Gets seLinuxContext
     * @return \UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions
     */
    public function getSeLinuxContext()
    {
        return $this->container['seLinuxContext'];
    }

    /**
     * Sets seLinuxContext
     * @param \UniversityOfAdelaide\OpenShift\Model\V1SELinuxContextStrategyOptions $seLinuxContext SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext.
     * @return $this
     */
    public function setSeLinuxContext($seLinuxContext)
    {
        $this->container['seLinuxContext'] = $seLinuxContext;

        return $this;
    }

    /**
     * Gets seccompProfiles
     * @return string[]
     */
    public function getSeccompProfiles()
    {
        return $this->container['seccompProfiles'];
    }

    /**
     * Sets seccompProfiles
     * @param string[] $seccompProfiles SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container. The wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.
     * @return $this
     */
    public function setSeccompProfiles($seccompProfiles)
    {
        $this->container['seccompProfiles'] = $seccompProfiles;

        return $this;
    }

    /**
     * Gets supplementalGroups
     * @return \UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions
     */
    public function getSupplementalGroups()
    {
        return $this->container['supplementalGroups'];
    }

    /**
     * Sets supplementalGroups
     * @param \UniversityOfAdelaide\OpenShift\Model\V1SupplementalGroupsStrategyOptions $supplementalGroups SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * @return $this
     */
    public function setSupplementalGroups($supplementalGroups)
    {
        $this->container['supplementalGroups'] = $supplementalGroups;

        return $this;
    }

    /**
     * Gets users
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     * @param string[] $users The users who have permissions to use this security context constraints
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets volumes
     * @return string[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     * @param string[] $volumes Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use '*'.
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


