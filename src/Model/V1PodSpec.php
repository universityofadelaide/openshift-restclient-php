<?php
/**
 * V1PodSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1PodSpec Class Doc Comment
 *
 * @category    Class
 * @description PodSpec is a description of a pod.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1PodSpec implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.PodSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activeDeadlineSeconds' => 'int',
        'affinity' => '\UniversityOfAdelaide\OpenShift\Model\V1Affinity',
        'automountServiceAccountToken' => 'bool',
        'containers' => '\UniversityOfAdelaide\OpenShift\Model\V1Container[]',
        'dnsPolicy' => 'string',
        'hostIPC' => 'bool',
        'hostNetwork' => 'bool',
        'hostPID' => 'bool',
        'hostname' => 'string',
        'imagePullSecrets' => '\UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference[]',
        'initContainers' => '\UniversityOfAdelaide\OpenShift\Model\V1Container[]',
        'nodeName' => 'string',
        'nodeSelector' => 'map[string,string]',
        'restartPolicy' => 'string',
        'schedulerName' => 'string',
        'securityContext' => '\UniversityOfAdelaide\OpenShift\Model\V1PodSecurityContext',
        'serviceAccount' => 'string',
        'serviceAccountName' => 'string',
        'subdomain' => 'string',
        'terminationGracePeriodSeconds' => 'int',
        'tolerations' => '\UniversityOfAdelaide\OpenShift\Model\V1Toleration[]',
        'volumes' => '\UniversityOfAdelaide\OpenShift\Model\V1Volume[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activeDeadlineSeconds' => 'activeDeadlineSeconds',
        'affinity' => 'affinity',
        'automountServiceAccountToken' => 'automountServiceAccountToken',
        'containers' => 'containers',
        'dnsPolicy' => 'dnsPolicy',
        'hostIPC' => 'hostIPC',
        'hostNetwork' => 'hostNetwork',
        'hostPID' => 'hostPID',
        'hostname' => 'hostname',
        'imagePullSecrets' => 'imagePullSecrets',
        'initContainers' => 'initContainers',
        'nodeName' => 'nodeName',
        'nodeSelector' => 'nodeSelector',
        'restartPolicy' => 'restartPolicy',
        'schedulerName' => 'schedulerName',
        'securityContext' => 'securityContext',
        'serviceAccount' => 'serviceAccount',
        'serviceAccountName' => 'serviceAccountName',
        'subdomain' => 'subdomain',
        'terminationGracePeriodSeconds' => 'terminationGracePeriodSeconds',
        'tolerations' => 'tolerations',
        'volumes' => 'volumes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activeDeadlineSeconds' => 'setActiveDeadlineSeconds',
        'affinity' => 'setAffinity',
        'automountServiceAccountToken' => 'setAutomountServiceAccountToken',
        'containers' => 'setContainers',
        'dnsPolicy' => 'setDnsPolicy',
        'hostIPC' => 'setHostIPC',
        'hostNetwork' => 'setHostNetwork',
        'hostPID' => 'setHostPID',
        'hostname' => 'setHostname',
        'imagePullSecrets' => 'setImagePullSecrets',
        'initContainers' => 'setInitContainers',
        'nodeName' => 'setNodeName',
        'nodeSelector' => 'setNodeSelector',
        'restartPolicy' => 'setRestartPolicy',
        'schedulerName' => 'setSchedulerName',
        'securityContext' => 'setSecurityContext',
        'serviceAccount' => 'setServiceAccount',
        'serviceAccountName' => 'setServiceAccountName',
        'subdomain' => 'setSubdomain',
        'terminationGracePeriodSeconds' => 'setTerminationGracePeriodSeconds',
        'tolerations' => 'setTolerations',
        'volumes' => 'setVolumes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activeDeadlineSeconds' => 'getActiveDeadlineSeconds',
        'affinity' => 'getAffinity',
        'automountServiceAccountToken' => 'getAutomountServiceAccountToken',
        'containers' => 'getContainers',
        'dnsPolicy' => 'getDnsPolicy',
        'hostIPC' => 'getHostIPC',
        'hostNetwork' => 'getHostNetwork',
        'hostPID' => 'getHostPID',
        'hostname' => 'getHostname',
        'imagePullSecrets' => 'getImagePullSecrets',
        'initContainers' => 'getInitContainers',
        'nodeName' => 'getNodeName',
        'nodeSelector' => 'getNodeSelector',
        'restartPolicy' => 'getRestartPolicy',
        'schedulerName' => 'getSchedulerName',
        'securityContext' => 'getSecurityContext',
        'serviceAccount' => 'getServiceAccount',
        'serviceAccountName' => 'getServiceAccountName',
        'subdomain' => 'getSubdomain',
        'terminationGracePeriodSeconds' => 'getTerminationGracePeriodSeconds',
        'tolerations' => 'getTolerations',
        'volumes' => 'getVolumes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activeDeadlineSeconds'] = isset($data['activeDeadlineSeconds']) ? $data['activeDeadlineSeconds'] : null;
        $this->container['affinity'] = isset($data['affinity']) ? $data['affinity'] : null;
        $this->container['automountServiceAccountToken'] = isset($data['automountServiceAccountToken']) ? $data['automountServiceAccountToken'] : null;
        $this->container['containers'] = isset($data['containers']) ? $data['containers'] : null;
        $this->container['dnsPolicy'] = isset($data['dnsPolicy']) ? $data['dnsPolicy'] : null;
        $this->container['hostIPC'] = isset($data['hostIPC']) ? $data['hostIPC'] : null;
        $this->container['hostNetwork'] = isset($data['hostNetwork']) ? $data['hostNetwork'] : null;
        $this->container['hostPID'] = isset($data['hostPID']) ? $data['hostPID'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['imagePullSecrets'] = isset($data['imagePullSecrets']) ? $data['imagePullSecrets'] : null;
        $this->container['initContainers'] = isset($data['initContainers']) ? $data['initContainers'] : null;
        $this->container['nodeName'] = isset($data['nodeName']) ? $data['nodeName'] : null;
        $this->container['nodeSelector'] = isset($data['nodeSelector']) ? $data['nodeSelector'] : null;
        $this->container['restartPolicy'] = isset($data['restartPolicy']) ? $data['restartPolicy'] : null;
        $this->container['schedulerName'] = isset($data['schedulerName']) ? $data['schedulerName'] : null;
        $this->container['securityContext'] = isset($data['securityContext']) ? $data['securityContext'] : null;
        $this->container['serviceAccount'] = isset($data['serviceAccount']) ? $data['serviceAccount'] : null;
        $this->container['serviceAccountName'] = isset($data['serviceAccountName']) ? $data['serviceAccountName'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
        $this->container['terminationGracePeriodSeconds'] = isset($data['terminationGracePeriodSeconds']) ? $data['terminationGracePeriodSeconds'] : null;
        $this->container['tolerations'] = isset($data['tolerations']) ? $data['tolerations'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['containers'] === null) {
            $invalid_properties[] = "'containers' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['containers'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activeDeadlineSeconds
     * @return int
     */
    public function getActiveDeadlineSeconds()
    {
        return $this->container['activeDeadlineSeconds'];
    }

    /**
     * Sets activeDeadlineSeconds
     * @param int $activeDeadlineSeconds Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     * @return $this
     */
    public function setActiveDeadlineSeconds($activeDeadlineSeconds)
    {
        $this->container['activeDeadlineSeconds'] = $activeDeadlineSeconds;

        return $this;
    }

    /**
     * Gets affinity
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Affinity
     */
    public function getAffinity()
    {
        return $this->container['affinity'];
    }

    /**
     * Sets affinity
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Affinity $affinity If specified, the pod's scheduling constraints
     * @return $this
     */
    public function setAffinity($affinity)
    {
        $this->container['affinity'] = $affinity;

        return $this;
    }

    /**
     * Gets automountServiceAccountToken
     * @return bool
     */
    public function getAutomountServiceAccountToken()
    {
        return $this->container['automountServiceAccountToken'];
    }

    /**
     * Sets automountServiceAccountToken
     * @param bool $automountServiceAccountToken AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     * @return $this
     */
    public function setAutomountServiceAccountToken($automountServiceAccountToken)
    {
        $this->container['automountServiceAccountToken'] = $automountServiceAccountToken;

        return $this;
    }

    /**
     * Gets containers
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Container[]
     */
    public function getContainers()
    {
        return $this->container['containers'];
    }

    /**
     * Sets containers
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Container[] $containers List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
     * @return $this
     */
    public function setContainers($containers)
    {
        $this->container['containers'] = $containers;

        return $this;
    }

    /**
     * Gets dnsPolicy
     * @return string
     */
    public function getDnsPolicy()
    {
        return $this->container['dnsPolicy'];
    }

    /**
     * Sets dnsPolicy
     * @param string $dnsPolicy Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     * @return $this
     */
    public function setDnsPolicy($dnsPolicy)
    {
        $this->container['dnsPolicy'] = $dnsPolicy;

        return $this;
    }

    /**
     * Gets hostIPC
     * @return bool
     */
    public function getHostIPC()
    {
        return $this->container['hostIPC'];
    }

    /**
     * Sets hostIPC
     * @param bool $hostIPC Use the host's ipc namespace. Optional: Default to false.
     * @return $this
     */
    public function setHostIPC($hostIPC)
    {
        $this->container['hostIPC'] = $hostIPC;

        return $this;
    }

    /**
     * Gets hostNetwork
     * @return bool
     */
    public function getHostNetwork()
    {
        return $this->container['hostNetwork'];
    }

    /**
     * Sets hostNetwork
     * @param bool $hostNetwork Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     * @return $this
     */
    public function setHostNetwork($hostNetwork)
    {
        $this->container['hostNetwork'] = $hostNetwork;

        return $this;
    }

    /**
     * Gets hostPID
     * @return bool
     */
    public function getHostPID()
    {
        return $this->container['hostPID'];
    }

    /**
     * Sets hostPID
     * @param bool $hostPID Use the host's pid namespace. Optional: Default to false.
     * @return $this
     */
    public function setHostPID($hostPID)
    {
        $this->container['hostPID'] = $hostPID;

        return $this;
    }

    /**
     * Gets hostname
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     * @param string $hostname Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets imagePullSecrets
     * @return \UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference[]
     */
    public function getImagePullSecrets()
    {
        return $this->container['imagePullSecrets'];
    }

    /**
     * Sets imagePullSecrets
     * @param \UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference[] $imagePullSecrets ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
     * @return $this
     */
    public function setImagePullSecrets($imagePullSecrets)
    {
        $this->container['imagePullSecrets'] = $imagePullSecrets;

        return $this;
    }

    /**
     * Gets initContainers
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Container[]
     */
    public function getInitContainers()
    {
        return $this->container['initContainers'];
    }

    /**
     * Sets initContainers
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Container[] $initContainers List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
     * @return $this
     */
    public function setInitContainers($initContainers)
    {
        $this->container['initContainers'] = $initContainers;

        return $this;
    }

    /**
     * Gets nodeName
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['nodeName'];
    }

    /**
     * Sets nodeName
     * @param string $nodeName NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     * @return $this
     */
    public function setNodeName($nodeName)
    {
        $this->container['nodeName'] = $nodeName;

        return $this;
    }

    /**
     * Gets nodeSelector
     * @return map[string,string]
     */
    public function getNodeSelector()
    {
        return $this->container['nodeSelector'];
    }

    /**
     * Sets nodeSelector
     * @param map[string,string] $nodeSelector NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection/README
     * @return $this
     */
    public function setNodeSelector($nodeSelector)
    {
        $this->container['nodeSelector'] = $nodeSelector;

        return $this;
    }

    /**
     * Gets restartPolicy
     * @return string
     */
    public function getRestartPolicy()
    {
        return $this->container['restartPolicy'];
    }

    /**
     * Sets restartPolicy
     * @param string $restartPolicy Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy
     * @return $this
     */
    public function setRestartPolicy($restartPolicy)
    {
        $this->container['restartPolicy'] = $restartPolicy;

        return $this;
    }

    /**
     * Gets schedulerName
     * @return string
     */
    public function getSchedulerName()
    {
        return $this->container['schedulerName'];
    }

    /**
     * Sets schedulerName
     * @param string $schedulerName If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     * @return $this
     */
    public function setSchedulerName($schedulerName)
    {
        $this->container['schedulerName'] = $schedulerName;

        return $this;
    }

    /**
     * Gets securityContext
     * @return \UniversityOfAdelaide\OpenShift\Model\V1PodSecurityContext
     */
    public function getSecurityContext()
    {
        return $this->container['securityContext'];
    }

    /**
     * Sets securityContext
     * @param \UniversityOfAdelaide\OpenShift\Model\V1PodSecurityContext $securityContext SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     * @return $this
     */
    public function setSecurityContext($securityContext)
    {
        $this->container['securityContext'] = $securityContext;

        return $this;
    }

    /**
     * Gets serviceAccount
     * @return string
     */
    public function getServiceAccount()
    {
        return $this->container['serviceAccount'];
    }

    /**
     * Sets serviceAccount
     * @param string $serviceAccount DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     * @return $this
     */
    public function setServiceAccount($serviceAccount)
    {
        $this->container['serviceAccount'] = $serviceAccount;

        return $this;
    }

    /**
     * Gets serviceAccountName
     * @return string
     */
    public function getServiceAccountName()
    {
        return $this->container['serviceAccountName'];
    }

    /**
     * Sets serviceAccountName
     * @param string $serviceAccountName ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md
     * @return $this
     */
    public function setServiceAccountName($serviceAccountName)
    {
        $this->container['serviceAccountName'] = $serviceAccountName;

        return $this;
    }

    /**
     * Gets subdomain
     * @return string
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     * @param string $subdomain If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets terminationGracePeriodSeconds
     * @return int
     */
    public function getTerminationGracePeriodSeconds()
    {
        return $this->container['terminationGracePeriodSeconds'];
    }

    /**
     * Sets terminationGracePeriodSeconds
     * @param int $terminationGracePeriodSeconds Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     * @return $this
     */
    public function setTerminationGracePeriodSeconds($terminationGracePeriodSeconds)
    {
        $this->container['terminationGracePeriodSeconds'] = $terminationGracePeriodSeconds;

        return $this;
    }

    /**
     * Gets tolerations
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Toleration[]
     */
    public function getTolerations()
    {
        return $this->container['tolerations'];
    }

    /**
     * Sets tolerations
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Toleration[] $tolerations If specified, the pod's tolerations.
     * @return $this
     */
    public function setTolerations($tolerations)
    {
        $this->container['tolerations'] = $tolerations;

        return $this;
    }

    /**
     * Gets volumes
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Volume[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Volume[] $volumes List of volumes that can be mounted by containers belonging to the pod. More info: http://kubernetes.io/docs/user-guide/volumes
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


