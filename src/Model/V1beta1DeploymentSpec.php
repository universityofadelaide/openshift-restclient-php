<?php
/**
 * V1beta1DeploymentSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1beta1DeploymentSpec Class Doc Comment
 *
 * @category    Class
 * @description DeploymentSpec is the specification of the desired behavior of the Deployment.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1beta1DeploymentSpec implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.DeploymentSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_ready_seconds' => 'int',
        'paused' => 'bool',
        'progress_deadline_seconds' => 'int',
        'replicas' => 'int',
        'revision_history_limit' => 'int',
        'rollback_to' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1RollbackConfig',
        'selector' => '\UniversityOfAdelaide\OpenShift\Model\V1LabelSelector',
        'strategy' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentStrategy',
        'template' => '\UniversityOfAdelaide\OpenShift\Model\V1PodTemplateSpec'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'min_ready_seconds' => 'minReadySeconds',
        'paused' => 'paused',
        'progress_deadline_seconds' => 'progressDeadlineSeconds',
        'replicas' => 'replicas',
        'revision_history_limit' => 'revisionHistoryLimit',
        'rollback_to' => 'rollbackTo',
        'selector' => 'selector',
        'strategy' => 'strategy',
        'template' => 'template'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'min_ready_seconds' => 'setMinReadySeconds',
        'paused' => 'setPaused',
        'progress_deadline_seconds' => 'setProgressDeadlineSeconds',
        'replicas' => 'setReplicas',
        'revision_history_limit' => 'setRevisionHistoryLimit',
        'rollback_to' => 'setRollbackTo',
        'selector' => 'setSelector',
        'strategy' => 'setStrategy',
        'template' => 'setTemplate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'min_ready_seconds' => 'getMinReadySeconds',
        'paused' => 'getPaused',
        'progress_deadline_seconds' => 'getProgressDeadlineSeconds',
        'replicas' => 'getReplicas',
        'revision_history_limit' => 'getRevisionHistoryLimit',
        'rollback_to' => 'getRollbackTo',
        'selector' => 'getSelector',
        'strategy' => 'getStrategy',
        'template' => 'getTemplate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_ready_seconds'] = isset($data['min_ready_seconds']) ? $data['min_ready_seconds'] : null;
        $this->container['paused'] = isset($data['paused']) ? $data['paused'] : null;
        $this->container['progress_deadline_seconds'] = isset($data['progress_deadline_seconds']) ? $data['progress_deadline_seconds'] : null;
        $this->container['replicas'] = isset($data['replicas']) ? $data['replicas'] : null;
        $this->container['revision_history_limit'] = isset($data['revision_history_limit']) ? $data['revision_history_limit'] : null;
        $this->container['rollback_to'] = isset($data['rollback_to']) ? $data['rollback_to'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['template'] === null) {
            $invalid_properties[] = "'template' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['template'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets min_ready_seconds
     * @return int
     */
    public function getMinReadySeconds()
    {
        return $this->container['min_ready_seconds'];
    }

    /**
     * Sets min_ready_seconds
     * @param int $min_ready_seconds Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     * @return $this
     */
    public function setMinReadySeconds($min_ready_seconds)
    {
        $this->container['min_ready_seconds'] = $min_ready_seconds;

        return $this;
    }

    /**
     * Gets paused
     * @return bool
     */
    public function getPaused()
    {
        return $this->container['paused'];
    }

    /**
     * Sets paused
     * @param bool $paused Indicates that the deployment is paused and will not be processed by the deployment controller.
     * @return $this
     */
    public function setPaused($paused)
    {
        $this->container['paused'] = $paused;

        return $this;
    }

    /**
     * Gets progress_deadline_seconds
     * @return int
     */
    public function getProgressDeadlineSeconds()
    {
        return $this->container['progress_deadline_seconds'];
    }

    /**
     * Sets progress_deadline_seconds
     * @param int $progress_deadline_seconds The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.
     * @return $this
     */
    public function setProgressDeadlineSeconds($progress_deadline_seconds)
    {
        $this->container['progress_deadline_seconds'] = $progress_deadline_seconds;

        return $this;
    }

    /**
     * Gets replicas
     * @return int
     */
    public function getReplicas()
    {
        return $this->container['replicas'];
    }

    /**
     * Sets replicas
     * @param int $replicas Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
     * @return $this
     */
    public function setReplicas($replicas)
    {
        $this->container['replicas'] = $replicas;

        return $this;
    }

    /**
     * Gets revision_history_limit
     * @return int
     */
    public function getRevisionHistoryLimit()
    {
        return $this->container['revision_history_limit'];
    }

    /**
     * Sets revision_history_limit
     * @param int $revision_history_limit The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.
     * @return $this
     */
    public function setRevisionHistoryLimit($revision_history_limit)
    {
        $this->container['revision_history_limit'] = $revision_history_limit;

        return $this;
    }

    /**
     * Gets rollback_to
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1RollbackConfig
     */
    public function getRollbackTo()
    {
        return $this->container['rollback_to'];
    }

    /**
     * Sets rollback_to
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1RollbackConfig $rollback_to The config this deployment is rolling back to. Will be cleared after rollback is done.
     * @return $this
     */
    public function setRollbackTo($rollback_to)
    {
        $this->container['rollback_to'] = $rollback_to;

        return $this;
    }

    /**
     * Gets selector
     * @return \UniversityOfAdelaide\OpenShift\Model\V1LabelSelector
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     * @param \UniversityOfAdelaide\OpenShift\Model\V1LabelSelector $selector Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets strategy
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentStrategy
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1DeploymentStrategy $strategy The deployment strategy to use to replace existing pods with new ones.
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets template
     * @return \UniversityOfAdelaide\OpenShift\Model\V1PodTemplateSpec
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param \UniversityOfAdelaide\OpenShift\Model\V1PodTemplateSpec $template Template describes the pods that will be created.
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


