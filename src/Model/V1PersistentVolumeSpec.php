<?php
/**
 * V1PersistentVolumeSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1PersistentVolumeSpec Class Doc Comment
 *
 * @category    Class
 * @description PersistentVolumeSpec is the specification of a persistent volume.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1PersistentVolumeSpec implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.PersistentVolumeSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessModes' => 'string[]',
        'awsElasticBlockStore' => '\UniversityOfAdelaide\OpenShift\Model\V1AWSElasticBlockStoreVolumeSource',
        'azureDisk' => '\UniversityOfAdelaide\OpenShift\Model\V1AzureDiskVolumeSource',
        'azureFile' => '\UniversityOfAdelaide\OpenShift\Model\V1AzureFileVolumeSource',
        'capacity' => 'map[string,\UniversityOfAdelaide\OpenShift\Model\ResourceQuantity]',
        'cephfs' => '\UniversityOfAdelaide\OpenShift\Model\V1CephFSVolumeSource',
        'cinder' => '\UniversityOfAdelaide\OpenShift\Model\V1CinderVolumeSource',
        'claimRef' => '\UniversityOfAdelaide\OpenShift\Model\V1ObjectReference',
        'fc' => '\UniversityOfAdelaide\OpenShift\Model\V1FCVolumeSource',
        'flexVolume' => '\UniversityOfAdelaide\OpenShift\Model\V1FlexVolumeSource',
        'flocker' => '\UniversityOfAdelaide\OpenShift\Model\V1FlockerVolumeSource',
        'gcePersistentDisk' => '\UniversityOfAdelaide\OpenShift\Model\V1GCEPersistentDiskVolumeSource',
        'glusterfs' => '\UniversityOfAdelaide\OpenShift\Model\V1GlusterfsVolumeSource',
        'hostPath' => '\UniversityOfAdelaide\OpenShift\Model\V1HostPathVolumeSource',
        'iscsi' => '\UniversityOfAdelaide\OpenShift\Model\V1ISCSIVolumeSource',
        'nfs' => '\UniversityOfAdelaide\OpenShift\Model\V1NFSVolumeSource',
        'persistentVolumeReclaimPolicy' => 'string',
        'photonPersistentDisk' => '\UniversityOfAdelaide\OpenShift\Model\V1PhotonPersistentDiskVolumeSource',
        'portworxVolume' => '\UniversityOfAdelaide\OpenShift\Model\V1PortworxVolumeSource',
        'quobyte' => '\UniversityOfAdelaide\OpenShift\Model\V1QuobyteVolumeSource',
        'rbd' => '\UniversityOfAdelaide\OpenShift\Model\V1RBDVolumeSource',
        'scaleIO' => '\UniversityOfAdelaide\OpenShift\Model\V1ScaleIOVolumeSource',
        'storageClassName' => 'string',
        'vsphereVolume' => '\UniversityOfAdelaide\OpenShift\Model\V1VsphereVirtualDiskVolumeSource'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'accessModes' => 'accessModes',
        'awsElasticBlockStore' => 'awsElasticBlockStore',
        'azureDisk' => 'azureDisk',
        'azureFile' => 'azureFile',
        'capacity' => 'capacity',
        'cephfs' => 'cephfs',
        'cinder' => 'cinder',
        'claimRef' => 'claimRef',
        'fc' => 'fc',
        'flexVolume' => 'flexVolume',
        'flocker' => 'flocker',
        'gcePersistentDisk' => 'gcePersistentDisk',
        'glusterfs' => 'glusterfs',
        'hostPath' => 'hostPath',
        'iscsi' => 'iscsi',
        'nfs' => 'nfs',
        'persistentVolumeReclaimPolicy' => 'persistentVolumeReclaimPolicy',
        'photonPersistentDisk' => 'photonPersistentDisk',
        'portworxVolume' => 'portworxVolume',
        'quobyte' => 'quobyte',
        'rbd' => 'rbd',
        'scaleIO' => 'scaleIO',
        'storageClassName' => 'storageClassName',
        'vsphereVolume' => 'vsphereVolume'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'accessModes' => 'setAccessModes',
        'awsElasticBlockStore' => 'setAwsElasticBlockStore',
        'azureDisk' => 'setAzureDisk',
        'azureFile' => 'setAzureFile',
        'capacity' => 'setCapacity',
        'cephfs' => 'setCephfs',
        'cinder' => 'setCinder',
        'claimRef' => 'setClaimRef',
        'fc' => 'setFc',
        'flexVolume' => 'setFlexVolume',
        'flocker' => 'setFlocker',
        'gcePersistentDisk' => 'setGcePersistentDisk',
        'glusterfs' => 'setGlusterfs',
        'hostPath' => 'setHostPath',
        'iscsi' => 'setIscsi',
        'nfs' => 'setNfs',
        'persistentVolumeReclaimPolicy' => 'setPersistentVolumeReclaimPolicy',
        'photonPersistentDisk' => 'setPhotonPersistentDisk',
        'portworxVolume' => 'setPortworxVolume',
        'quobyte' => 'setQuobyte',
        'rbd' => 'setRbd',
        'scaleIO' => 'setScaleIO',
        'storageClassName' => 'setStorageClassName',
        'vsphereVolume' => 'setVsphereVolume'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'accessModes' => 'getAccessModes',
        'awsElasticBlockStore' => 'getAwsElasticBlockStore',
        'azureDisk' => 'getAzureDisk',
        'azureFile' => 'getAzureFile',
        'capacity' => 'getCapacity',
        'cephfs' => 'getCephfs',
        'cinder' => 'getCinder',
        'claimRef' => 'getClaimRef',
        'fc' => 'getFc',
        'flexVolume' => 'getFlexVolume',
        'flocker' => 'getFlocker',
        'gcePersistentDisk' => 'getGcePersistentDisk',
        'glusterfs' => 'getGlusterfs',
        'hostPath' => 'getHostPath',
        'iscsi' => 'getIscsi',
        'nfs' => 'getNfs',
        'persistentVolumeReclaimPolicy' => 'getPersistentVolumeReclaimPolicy',
        'photonPersistentDisk' => 'getPhotonPersistentDisk',
        'portworxVolume' => 'getPortworxVolume',
        'quobyte' => 'getQuobyte',
        'rbd' => 'getRbd',
        'scaleIO' => 'getScaleIO',
        'storageClassName' => 'getStorageClassName',
        'vsphereVolume' => 'getVsphereVolume'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessModes'] = isset($data['accessModes']) ? $data['accessModes'] : null;
        $this->container['awsElasticBlockStore'] = isset($data['awsElasticBlockStore']) ? $data['awsElasticBlockStore'] : null;
        $this->container['azureDisk'] = isset($data['azureDisk']) ? $data['azureDisk'] : null;
        $this->container['azureFile'] = isset($data['azureFile']) ? $data['azureFile'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['cephfs'] = isset($data['cephfs']) ? $data['cephfs'] : null;
        $this->container['cinder'] = isset($data['cinder']) ? $data['cinder'] : null;
        $this->container['claimRef'] = isset($data['claimRef']) ? $data['claimRef'] : null;
        $this->container['fc'] = isset($data['fc']) ? $data['fc'] : null;
        $this->container['flexVolume'] = isset($data['flexVolume']) ? $data['flexVolume'] : null;
        $this->container['flocker'] = isset($data['flocker']) ? $data['flocker'] : null;
        $this->container['gcePersistentDisk'] = isset($data['gcePersistentDisk']) ? $data['gcePersistentDisk'] : null;
        $this->container['glusterfs'] = isset($data['glusterfs']) ? $data['glusterfs'] : null;
        $this->container['hostPath'] = isset($data['hostPath']) ? $data['hostPath'] : null;
        $this->container['iscsi'] = isset($data['iscsi']) ? $data['iscsi'] : null;
        $this->container['nfs'] = isset($data['nfs']) ? $data['nfs'] : null;
        $this->container['persistentVolumeReclaimPolicy'] = isset($data['persistentVolumeReclaimPolicy']) ? $data['persistentVolumeReclaimPolicy'] : null;
        $this->container['photonPersistentDisk'] = isset($data['photonPersistentDisk']) ? $data['photonPersistentDisk'] : null;
        $this->container['portworxVolume'] = isset($data['portworxVolume']) ? $data['portworxVolume'] : null;
        $this->container['quobyte'] = isset($data['quobyte']) ? $data['quobyte'] : null;
        $this->container['rbd'] = isset($data['rbd']) ? $data['rbd'] : null;
        $this->container['scaleIO'] = isset($data['scaleIO']) ? $data['scaleIO'] : null;
        $this->container['storageClassName'] = isset($data['storageClassName']) ? $data['storageClassName'] : null;
        $this->container['vsphereVolume'] = isset($data['vsphereVolume']) ? $data['vsphereVolume'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets accessModes
     * @return string[]
     */
    public function getAccessModes()
    {
        return $this->container['accessModes'];
    }

    /**
     * Sets accessModes
     * @param string[] $accessModes AccessModes contains all ways the volume can be mounted. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes
     * @return $this
     */
    public function setAccessModes($accessModes)
    {
        $this->container['accessModes'] = $accessModes;

        return $this;
    }

    /**
     * Gets awsElasticBlockStore
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AWSElasticBlockStoreVolumeSource
     */
    public function getAwsElasticBlockStore()
    {
        return $this->container['awsElasticBlockStore'];
    }

    /**
     * Sets awsElasticBlockStore
     * @param \UniversityOfAdelaide\OpenShift\Model\V1AWSElasticBlockStoreVolumeSource $awsElasticBlockStore AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
     * @return $this
     */
    public function setAwsElasticBlockStore($awsElasticBlockStore)
    {
        $this->container['awsElasticBlockStore'] = $awsElasticBlockStore;

        return $this;
    }

    /**
     * Gets azureDisk
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AzureDiskVolumeSource
     */
    public function getAzureDisk()
    {
        return $this->container['azureDisk'];
    }

    /**
     * Sets azureDisk
     * @param \UniversityOfAdelaide\OpenShift\Model\V1AzureDiskVolumeSource $azureDisk AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * @return $this
     */
    public function setAzureDisk($azureDisk)
    {
        $this->container['azureDisk'] = $azureDisk;

        return $this;
    }

    /**
     * Gets azureFile
     * @return \UniversityOfAdelaide\OpenShift\Model\V1AzureFileVolumeSource
     */
    public function getAzureFile()
    {
        return $this->container['azureFile'];
    }

    /**
     * Sets azureFile
     * @param \UniversityOfAdelaide\OpenShift\Model\V1AzureFileVolumeSource $azureFile AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * @return $this
     */
    public function setAzureFile($azureFile)
    {
        $this->container['azureFile'] = $azureFile;

        return $this;
    }

    /**
     * Gets capacity
     * @return map[string,\UniversityOfAdelaide\OpenShift\Model\ResourceQuantity]
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     * @param map[string,\UniversityOfAdelaide\OpenShift\Model\ResourceQuantity] $capacity A description of the persistent volume's resources and capacity. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#capacity
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets cephfs
     * @return \UniversityOfAdelaide\OpenShift\Model\V1CephFSVolumeSource
     */
    public function getCephfs()
    {
        return $this->container['cephfs'];
    }

    /**
     * Sets cephfs
     * @param \UniversityOfAdelaide\OpenShift\Model\V1CephFSVolumeSource $cephfs CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * @return $this
     */
    public function setCephfs($cephfs)
    {
        $this->container['cephfs'] = $cephfs;

        return $this;
    }

    /**
     * Gets cinder
     * @return \UniversityOfAdelaide\OpenShift\Model\V1CinderVolumeSource
     */
    public function getCinder()
    {
        return $this->container['cinder'];
    }

    /**
     * Sets cinder
     * @param \UniversityOfAdelaide\OpenShift\Model\V1CinderVolumeSource $cinder Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     * @return $this
     */
    public function setCinder($cinder)
    {
        $this->container['cinder'] = $cinder;

        return $this;
    }

    /**
     * Gets claimRef
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ObjectReference
     */
    public function getClaimRef()
    {
        return $this->container['claimRef'];
    }

    /**
     * Sets claimRef
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ObjectReference $claimRef ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#binding
     * @return $this
     */
    public function setClaimRef($claimRef)
    {
        $this->container['claimRef'] = $claimRef;

        return $this;
    }

    /**
     * Gets fc
     * @return \UniversityOfAdelaide\OpenShift\Model\V1FCVolumeSource
     */
    public function getFc()
    {
        return $this->container['fc'];
    }

    /**
     * Sets fc
     * @param \UniversityOfAdelaide\OpenShift\Model\V1FCVolumeSource $fc FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * @return $this
     */
    public function setFc($fc)
    {
        $this->container['fc'] = $fc;

        return $this;
    }

    /**
     * Gets flexVolume
     * @return \UniversityOfAdelaide\OpenShift\Model\V1FlexVolumeSource
     */
    public function getFlexVolume()
    {
        return $this->container['flexVolume'];
    }

    /**
     * Sets flexVolume
     * @param \UniversityOfAdelaide\OpenShift\Model\V1FlexVolumeSource $flexVolume FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     * @return $this
     */
    public function setFlexVolume($flexVolume)
    {
        $this->container['flexVolume'] = $flexVolume;

        return $this;
    }

    /**
     * Gets flocker
     * @return \UniversityOfAdelaide\OpenShift\Model\V1FlockerVolumeSource
     */
    public function getFlocker()
    {
        return $this->container['flocker'];
    }

    /**
     * Sets flocker
     * @param \UniversityOfAdelaide\OpenShift\Model\V1FlockerVolumeSource $flocker Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * @return $this
     */
    public function setFlocker($flocker)
    {
        $this->container['flocker'] = $flocker;

        return $this;
    }

    /**
     * Gets gcePersistentDisk
     * @return \UniversityOfAdelaide\OpenShift\Model\V1GCEPersistentDiskVolumeSource
     */
    public function getGcePersistentDisk()
    {
        return $this->container['gcePersistentDisk'];
    }

    /**
     * Sets gcePersistentDisk
     * @param \UniversityOfAdelaide\OpenShift\Model\V1GCEPersistentDiskVolumeSource $gcePersistentDisk GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
     * @return $this
     */
    public function setGcePersistentDisk($gcePersistentDisk)
    {
        $this->container['gcePersistentDisk'] = $gcePersistentDisk;

        return $this;
    }

    /**
     * Gets glusterfs
     * @return \UniversityOfAdelaide\OpenShift\Model\V1GlusterfsVolumeSource
     */
    public function getGlusterfs()
    {
        return $this->container['glusterfs'];
    }

    /**
     * Sets glusterfs
     * @param \UniversityOfAdelaide\OpenShift\Model\V1GlusterfsVolumeSource $glusterfs Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
     * @return $this
     */
    public function setGlusterfs($glusterfs)
    {
        $this->container['glusterfs'] = $glusterfs;

        return $this;
    }

    /**
     * Gets hostPath
     * @return \UniversityOfAdelaide\OpenShift\Model\V1HostPathVolumeSource
     */
    public function getHostPath()
    {
        return $this->container['hostPath'];
    }

    /**
     * Sets hostPath
     * @param \UniversityOfAdelaide\OpenShift\Model\V1HostPathVolumeSource $hostPath HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
     * @return $this
     */
    public function setHostPath($hostPath)
    {
        $this->container['hostPath'] = $hostPath;

        return $this;
    }

    /**
     * Gets iscsi
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ISCSIVolumeSource
     */
    public function getIscsi()
    {
        return $this->container['iscsi'];
    }

    /**
     * Sets iscsi
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ISCSIVolumeSource $iscsi ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * @return $this
     */
    public function setIscsi($iscsi)
    {
        $this->container['iscsi'] = $iscsi;

        return $this;
    }

    /**
     * Gets nfs
     * @return \UniversityOfAdelaide\OpenShift\Model\V1NFSVolumeSource
     */
    public function getNfs()
    {
        return $this->container['nfs'];
    }

    /**
     * Sets nfs
     * @param \UniversityOfAdelaide\OpenShift\Model\V1NFSVolumeSource $nfs NFS represents an NFS mount on the host. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
     * @return $this
     */
    public function setNfs($nfs)
    {
        $this->container['nfs'] = $nfs;

        return $this;
    }

    /**
     * Gets persistentVolumeReclaimPolicy
     * @return string
     */
    public function getPersistentVolumeReclaimPolicy()
    {
        return $this->container['persistentVolumeReclaimPolicy'];
    }

    /**
     * Sets persistentVolumeReclaimPolicy
     * @param string $persistentVolumeReclaimPolicy What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#recycling-policy
     * @return $this
     */
    public function setPersistentVolumeReclaimPolicy($persistentVolumeReclaimPolicy)
    {
        $this->container['persistentVolumeReclaimPolicy'] = $persistentVolumeReclaimPolicy;

        return $this;
    }

    /**
     * Gets photonPersistentDisk
     * @return \UniversityOfAdelaide\OpenShift\Model\V1PhotonPersistentDiskVolumeSource
     */
    public function getPhotonPersistentDisk()
    {
        return $this->container['photonPersistentDisk'];
    }

    /**
     * Sets photonPersistentDisk
     * @param \UniversityOfAdelaide\OpenShift\Model\V1PhotonPersistentDiskVolumeSource $photonPersistentDisk PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * @return $this
     */
    public function setPhotonPersistentDisk($photonPersistentDisk)
    {
        $this->container['photonPersistentDisk'] = $photonPersistentDisk;

        return $this;
    }

    /**
     * Gets portworxVolume
     * @return \UniversityOfAdelaide\OpenShift\Model\V1PortworxVolumeSource
     */
    public function getPortworxVolume()
    {
        return $this->container['portworxVolume'];
    }

    /**
     * Sets portworxVolume
     * @param \UniversityOfAdelaide\OpenShift\Model\V1PortworxVolumeSource $portworxVolume PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * @return $this
     */
    public function setPortworxVolume($portworxVolume)
    {
        $this->container['portworxVolume'] = $portworxVolume;

        return $this;
    }

    /**
     * Gets quobyte
     * @return \UniversityOfAdelaide\OpenShift\Model\V1QuobyteVolumeSource
     */
    public function getQuobyte()
    {
        return $this->container['quobyte'];
    }

    /**
     * Sets quobyte
     * @param \UniversityOfAdelaide\OpenShift\Model\V1QuobyteVolumeSource $quobyte Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * @return $this
     */
    public function setQuobyte($quobyte)
    {
        $this->container['quobyte'] = $quobyte;

        return $this;
    }

    /**
     * Gets rbd
     * @return \UniversityOfAdelaide\OpenShift\Model\V1RBDVolumeSource
     */
    public function getRbd()
    {
        return $this->container['rbd'];
    }

    /**
     * Sets rbd
     * @param \UniversityOfAdelaide\OpenShift\Model\V1RBDVolumeSource $rbd RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
     * @return $this
     */
    public function setRbd($rbd)
    {
        $this->container['rbd'] = $rbd;

        return $this;
    }

    /**
     * Gets scaleIO
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ScaleIOVolumeSource
     */
    public function getScaleIO()
    {
        return $this->container['scaleIO'];
    }

    /**
     * Sets scaleIO
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ScaleIOVolumeSource $scaleIO ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * @return $this
     */
    public function setScaleIO($scaleIO)
    {
        $this->container['scaleIO'] = $scaleIO;

        return $this;
    }

    /**
     * Gets storageClassName
     * @return string
     */
    public function getStorageClassName()
    {
        return $this->container['storageClassName'];
    }

    /**
     * Sets storageClassName
     * @param string $storageClassName Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * @return $this
     */
    public function setStorageClassName($storageClassName)
    {
        $this->container['storageClassName'] = $storageClassName;

        return $this;
    }

    /**
     * Gets vsphereVolume
     * @return \UniversityOfAdelaide\OpenShift\Model\V1VsphereVirtualDiskVolumeSource
     */
    public function getVsphereVolume()
    {
        return $this->container['vsphereVolume'];
    }

    /**
     * Sets vsphereVolume
     * @param \UniversityOfAdelaide\OpenShift\Model\V1VsphereVirtualDiskVolumeSource $vsphereVolume VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * @return $this
     */
    public function setVsphereVolume($vsphereVolume)
    {
        $this->container['vsphereVolume'] = $vsphereVolume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


