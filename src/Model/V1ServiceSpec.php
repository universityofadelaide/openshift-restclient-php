<?php
/**
 * V1ServiceSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1ServiceSpec Class Doc Comment
 *
 * @category    Class
 * @description ServiceSpec describes the attributes that a user creates on a service.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1ServiceSpec implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.ServiceSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clusterIP' => 'string',
        'deprecatedPublicIPs' => 'string[]',
        'externalIPs' => 'string[]',
        'externalName' => 'string',
        'loadBalancerIP' => 'string',
        'loadBalancerSourceRanges' => 'string[]',
        'ports' => '\UniversityOfAdelaide\OpenShift\Model\V1ServicePort[]',
        'selector' => 'map[string,string]',
        'sessionAffinity' => 'string',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'clusterIP' => 'clusterIP',
        'deprecatedPublicIPs' => 'deprecatedPublicIPs',
        'externalIPs' => 'externalIPs',
        'externalName' => 'externalName',
        'loadBalancerIP' => 'loadBalancerIP',
        'loadBalancerSourceRanges' => 'loadBalancerSourceRanges',
        'ports' => 'ports',
        'selector' => 'selector',
        'sessionAffinity' => 'sessionAffinity',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'clusterIP' => 'setClusterIP',
        'deprecatedPublicIPs' => 'setDeprecatedPublicIPs',
        'externalIPs' => 'setExternalIPs',
        'externalName' => 'setExternalName',
        'loadBalancerIP' => 'setLoadBalancerIP',
        'loadBalancerSourceRanges' => 'setLoadBalancerSourceRanges',
        'ports' => 'setPorts',
        'selector' => 'setSelector',
        'sessionAffinity' => 'setSessionAffinity',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'clusterIP' => 'getClusterIP',
        'deprecatedPublicIPs' => 'getDeprecatedPublicIPs',
        'externalIPs' => 'getExternalIPs',
        'externalName' => 'getExternalName',
        'loadBalancerIP' => 'getLoadBalancerIP',
        'loadBalancerSourceRanges' => 'getLoadBalancerSourceRanges',
        'ports' => 'getPorts',
        'selector' => 'getSelector',
        'sessionAffinity' => 'getSessionAffinity',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clusterIP'] = isset($data['clusterIP']) ? $data['clusterIP'] : null;
        $this->container['deprecatedPublicIPs'] = isset($data['deprecatedPublicIPs']) ? $data['deprecatedPublicIPs'] : null;
        $this->container['externalIPs'] = isset($data['externalIPs']) ? $data['externalIPs'] : null;
        $this->container['externalName'] = isset($data['externalName']) ? $data['externalName'] : null;
        $this->container['loadBalancerIP'] = isset($data['loadBalancerIP']) ? $data['loadBalancerIP'] : null;
        $this->container['loadBalancerSourceRanges'] = isset($data['loadBalancerSourceRanges']) ? $data['loadBalancerSourceRanges'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['sessionAffinity'] = isset($data['sessionAffinity']) ? $data['sessionAffinity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets clusterIP
     * @return string
     */
    public function getClusterIP()
    {
        return $this->container['clusterIP'];
    }

    /**
     * Sets clusterIP
     * @param string $clusterIP clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies
     * @return $this
     */
    public function setClusterIP($clusterIP)
    {
        $this->container['clusterIP'] = $clusterIP;

        return $this;
    }

    /**
     * Gets deprecatedPublicIPs
     * @return string[]
     */
    public function getDeprecatedPublicIPs()
    {
        return $this->container['deprecatedPublicIPs'];
    }

    /**
     * Sets deprecatedPublicIPs
     * @param string[] $deprecatedPublicIPs deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used.
     * @return $this
     */
    public function setDeprecatedPublicIPs($deprecatedPublicIPs)
    {
        $this->container['deprecatedPublicIPs'] = $deprecatedPublicIPs;

        return $this;
    }

    /**
     * Gets externalIPs
     * @return string[]
     */
    public function getExternalIPs()
    {
        return $this->container['externalIPs'];
    }

    /**
     * Sets externalIPs
     * @param string[] $externalIPs externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field.
     * @return $this
     */
    public function setExternalIPs($externalIPs)
    {
        $this->container['externalIPs'] = $externalIPs;

        return $this;
    }

    /**
     * Gets externalName
     * @return string
     */
    public function getExternalName()
    {
        return $this->container['externalName'];
    }

    /**
     * Sets externalName
     * @param string $externalName externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.
     * @return $this
     */
    public function setExternalName($externalName)
    {
        $this->container['externalName'] = $externalName;

        return $this;
    }

    /**
     * Gets loadBalancerIP
     * @return string
     */
    public function getLoadBalancerIP()
    {
        return $this->container['loadBalancerIP'];
    }

    /**
     * Sets loadBalancerIP
     * @param string $loadBalancerIP Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
     * @return $this
     */
    public function setLoadBalancerIP($loadBalancerIP)
    {
        $this->container['loadBalancerIP'] = $loadBalancerIP;

        return $this;
    }

    /**
     * Gets loadBalancerSourceRanges
     * @return string[]
     */
    public function getLoadBalancerSourceRanges()
    {
        return $this->container['loadBalancerSourceRanges'];
    }

    /**
     * Sets loadBalancerSourceRanges
     * @param string[] $loadBalancerSourceRanges If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: http://kubernetes.io/docs/user-guide/services-firewalls
     * @return $this
     */
    public function setLoadBalancerSourceRanges($loadBalancerSourceRanges)
    {
        $this->container['loadBalancerSourceRanges'] = $loadBalancerSourceRanges;

        return $this;
    }

    /**
     * Gets ports
     * @return \UniversityOfAdelaide\OpenShift\Model\V1ServicePort[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     * @param \UniversityOfAdelaide\OpenShift\Model\V1ServicePort[] $ports The list of ports that are exposed by this service. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets selector
     * @return map[string,string]
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     * @param map[string,string] $selector Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://kubernetes.io/docs/user-guide/services#overview
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets sessionAffinity
     * @return string
     */
    public function getSessionAffinity()
    {
        return $this->container['sessionAffinity'];
    }

    /**
     * Sets sessionAffinity
     * @param string $sessionAffinity Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies
     * @return $this
     */
    public function setSessionAffinity($sessionAffinity)
    {
        $this->container['sessionAffinity'] = $sessionAffinity;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: http://kubernetes.io/docs/user-guide/services#overview
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


