<?php
/**
 * V1ScaleIOVolumeSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1ScaleIOVolumeSource Class Doc Comment
 *
 * @category    Class
 * @description ScaleIOVolumeSource represents a persistent ScaleIO volume
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1ScaleIOVolumeSource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.ScaleIOVolumeSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fs_type' => 'string',
        'gateway' => 'string',
        'protection_domain' => 'string',
        'read_only' => 'bool',
        'secret_ref' => '\UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference',
        'ssl_enabled' => 'bool',
        'storage_mode' => 'string',
        'storage_pool' => 'string',
        'system' => 'string',
        'volume_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'fs_type' => 'fsType',
        'gateway' => 'gateway',
        'protection_domain' => 'protectionDomain',
        'read_only' => 'readOnly',
        'secret_ref' => 'secretRef',
        'ssl_enabled' => 'sslEnabled',
        'storage_mode' => 'storageMode',
        'storage_pool' => 'storagePool',
        'system' => 'system',
        'volume_name' => 'volumeName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'fs_type' => 'setFsType',
        'gateway' => 'setGateway',
        'protection_domain' => 'setProtectionDomain',
        'read_only' => 'setReadOnly',
        'secret_ref' => 'setSecretRef',
        'ssl_enabled' => 'setSslEnabled',
        'storage_mode' => 'setStorageMode',
        'storage_pool' => 'setStoragePool',
        'system' => 'setSystem',
        'volume_name' => 'setVolumeName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'fs_type' => 'getFsType',
        'gateway' => 'getGateway',
        'protection_domain' => 'getProtectionDomain',
        'read_only' => 'getReadOnly',
        'secret_ref' => 'getSecretRef',
        'ssl_enabled' => 'getSslEnabled',
        'storage_mode' => 'getStorageMode',
        'storage_pool' => 'getStoragePool',
        'system' => 'getSystem',
        'volume_name' => 'getVolumeName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fs_type'] = isset($data['fs_type']) ? $data['fs_type'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['protection_domain'] = isset($data['protection_domain']) ? $data['protection_domain'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['secret_ref'] = isset($data['secret_ref']) ? $data['secret_ref'] : null;
        $this->container['ssl_enabled'] = isset($data['ssl_enabled']) ? $data['ssl_enabled'] : null;
        $this->container['storage_mode'] = isset($data['storage_mode']) ? $data['storage_mode'] : null;
        $this->container['storage_pool'] = isset($data['storage_pool']) ? $data['storage_pool'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['volume_name'] = isset($data['volume_name']) ? $data['volume_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['gateway'] === null) {
            $invalid_properties[] = "'gateway' can't be null";
        }
        if ($this->container['secret_ref'] === null) {
            $invalid_properties[] = "'secret_ref' can't be null";
        }
        if ($this->container['system'] === null) {
            $invalid_properties[] = "'system' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['gateway'] === null) {
            return false;
        }
        if ($this->container['secret_ref'] === null) {
            return false;
        }
        if ($this->container['system'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets fs_type
     * @return string
     */
    public function getFsType()
    {
        return $this->container['fs_type'];
    }

    /**
     * Sets fs_type
     * @param string $fs_type Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @return $this
     */
    public function setFsType($fs_type)
    {
        $this->container['fs_type'] = $fs_type;

        return $this;
    }

    /**
     * Gets gateway
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     * @param string $gateway The host address of the ScaleIO API Gateway.
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets protection_domain
     * @return string
     */
    public function getProtectionDomain()
    {
        return $this->container['protection_domain'];
    }

    /**
     * Sets protection_domain
     * @param string $protection_domain The name of the Protection Domain for the configured storage (defaults to \"default\").
     * @return $this
     */
    public function setProtectionDomain($protection_domain)
    {
        $this->container['protection_domain'] = $protection_domain;

        return $this;
    }

    /**
     * Gets read_only
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     * @param bool $read_only Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets secret_ref
     * @return \UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference
     */
    public function getSecretRef()
    {
        return $this->container['secret_ref'];
    }

    /**
     * Sets secret_ref
     * @param \UniversityOfAdelaide\OpenShift\Model\V1LocalObjectReference $secret_ref SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
     * @return $this
     */
    public function setSecretRef($secret_ref)
    {
        $this->container['secret_ref'] = $secret_ref;

        return $this;
    }

    /**
     * Gets ssl_enabled
     * @return bool
     */
    public function getSslEnabled()
    {
        return $this->container['ssl_enabled'];
    }

    /**
     * Sets ssl_enabled
     * @param bool $ssl_enabled Flag to enable/disable SSL communication with Gateway, default false
     * @return $this
     */
    public function setSslEnabled($ssl_enabled)
    {
        $this->container['ssl_enabled'] = $ssl_enabled;

        return $this;
    }

    /**
     * Gets storage_mode
     * @return string
     */
    public function getStorageMode()
    {
        return $this->container['storage_mode'];
    }

    /**
     * Sets storage_mode
     * @param string $storage_mode Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").
     * @return $this
     */
    public function setStorageMode($storage_mode)
    {
        $this->container['storage_mode'] = $storage_mode;

        return $this;
    }

    /**
     * Gets storage_pool
     * @return string
     */
    public function getStoragePool()
    {
        return $this->container['storage_pool'];
    }

    /**
     * Sets storage_pool
     * @param string $storage_pool The Storage Pool associated with the protection domain (defaults to \"default\").
     * @return $this
     */
    public function setStoragePool($storage_pool)
    {
        $this->container['storage_pool'] = $storage_pool;

        return $this;
    }

    /**
     * Gets system
     * @return string
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     * @param string $system The name of the storage system as configured in ScaleIO.
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets volume_name
     * @return string
     */
    public function getVolumeName()
    {
        return $this->container['volume_name'];
    }

    /**
     * Sets volume_name
     * @param string $volume_name The name of a volume already created in the ScaleIO system that is associated with this volume source.
     * @return $this
     */
    public function setVolumeName($volume_name)
    {
        $this->container['volume_name'] = $volume_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


