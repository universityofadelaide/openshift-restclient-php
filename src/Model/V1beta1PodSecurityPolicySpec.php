<?php
/**
 * V1beta1PodSecurityPolicySpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1beta1PodSecurityPolicySpec Class Doc Comment
 *
 * @category    Class
 * @description Pod Security Policy Spec defines the policy enforced.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1beta1PodSecurityPolicySpec implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.PodSecurityPolicySpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowedCapabilities' => 'string[]',
        'defaultAddCapabilities' => 'string[]',
        'fsGroup' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1FSGroupStrategyOptions',
        'hostIPC' => 'bool',
        'hostNetwork' => 'bool',
        'hostPID' => 'bool',
        'hostPorts' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1HostPortRange[]',
        'privileged' => 'bool',
        'readOnlyRootFilesystem' => 'bool',
        'requiredDropCapabilities' => 'string[]',
        'runAsUser' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1RunAsUserStrategyOptions',
        'seLinux' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1SELinuxStrategyOptions',
        'supplementalGroups' => '\UniversityOfAdelaide\OpenShift\Model\V1beta1SupplementalGroupsStrategyOptions',
        'volumes' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'allowedCapabilities' => 'allowedCapabilities',
        'defaultAddCapabilities' => 'defaultAddCapabilities',
        'fsGroup' => 'fsGroup',
        'hostIPC' => 'hostIPC',
        'hostNetwork' => 'hostNetwork',
        'hostPID' => 'hostPID',
        'hostPorts' => 'hostPorts',
        'privileged' => 'privileged',
        'readOnlyRootFilesystem' => 'readOnlyRootFilesystem',
        'requiredDropCapabilities' => 'requiredDropCapabilities',
        'runAsUser' => 'runAsUser',
        'seLinux' => 'seLinux',
        'supplementalGroups' => 'supplementalGroups',
        'volumes' => 'volumes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'allowedCapabilities' => 'setAllowedCapabilities',
        'defaultAddCapabilities' => 'setDefaultAddCapabilities',
        'fsGroup' => 'setFsGroup',
        'hostIPC' => 'setHostIPC',
        'hostNetwork' => 'setHostNetwork',
        'hostPID' => 'setHostPID',
        'hostPorts' => 'setHostPorts',
        'privileged' => 'setPrivileged',
        'readOnlyRootFilesystem' => 'setReadOnlyRootFilesystem',
        'requiredDropCapabilities' => 'setRequiredDropCapabilities',
        'runAsUser' => 'setRunAsUser',
        'seLinux' => 'setSeLinux',
        'supplementalGroups' => 'setSupplementalGroups',
        'volumes' => 'setVolumes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'allowedCapabilities' => 'getAllowedCapabilities',
        'defaultAddCapabilities' => 'getDefaultAddCapabilities',
        'fsGroup' => 'getFsGroup',
        'hostIPC' => 'getHostIPC',
        'hostNetwork' => 'getHostNetwork',
        'hostPID' => 'getHostPID',
        'hostPorts' => 'getHostPorts',
        'privileged' => 'getPrivileged',
        'readOnlyRootFilesystem' => 'getReadOnlyRootFilesystem',
        'requiredDropCapabilities' => 'getRequiredDropCapabilities',
        'runAsUser' => 'getRunAsUser',
        'seLinux' => 'getSeLinux',
        'supplementalGroups' => 'getSupplementalGroups',
        'volumes' => 'getVolumes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowedCapabilities'] = isset($data['allowedCapabilities']) ? $data['allowedCapabilities'] : null;
        $this->container['defaultAddCapabilities'] = isset($data['defaultAddCapabilities']) ? $data['defaultAddCapabilities'] : null;
        $this->container['fsGroup'] = isset($data['fsGroup']) ? $data['fsGroup'] : null;
        $this->container['hostIPC'] = isset($data['hostIPC']) ? $data['hostIPC'] : null;
        $this->container['hostNetwork'] = isset($data['hostNetwork']) ? $data['hostNetwork'] : null;
        $this->container['hostPID'] = isset($data['hostPID']) ? $data['hostPID'] : null;
        $this->container['hostPorts'] = isset($data['hostPorts']) ? $data['hostPorts'] : null;
        $this->container['privileged'] = isset($data['privileged']) ? $data['privileged'] : null;
        $this->container['readOnlyRootFilesystem'] = isset($data['readOnlyRootFilesystem']) ? $data['readOnlyRootFilesystem'] : null;
        $this->container['requiredDropCapabilities'] = isset($data['requiredDropCapabilities']) ? $data['requiredDropCapabilities'] : null;
        $this->container['runAsUser'] = isset($data['runAsUser']) ? $data['runAsUser'] : null;
        $this->container['seLinux'] = isset($data['seLinux']) ? $data['seLinux'] : null;
        $this->container['supplementalGroups'] = isset($data['supplementalGroups']) ? $data['supplementalGroups'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['fsGroup'] === null) {
            $invalid_properties[] = "'fsGroup' can't be null";
        }
        if ($this->container['runAsUser'] === null) {
            $invalid_properties[] = "'runAsUser' can't be null";
        }
        if ($this->container['seLinux'] === null) {
            $invalid_properties[] = "'seLinux' can't be null";
        }
        if ($this->container['supplementalGroups'] === null) {
            $invalid_properties[] = "'supplementalGroups' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['fsGroup'] === null) {
            return false;
        }
        if ($this->container['runAsUser'] === null) {
            return false;
        }
        if ($this->container['seLinux'] === null) {
            return false;
        }
        if ($this->container['supplementalGroups'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allowedCapabilities
     * @return string[]
     */
    public function getAllowedCapabilities()
    {
        return $this->container['allowedCapabilities'];
    }

    /**
     * Sets allowedCapabilities
     * @param string[] $allowedCapabilities AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.
     * @return $this
     */
    public function setAllowedCapabilities($allowedCapabilities)
    {
        $this->container['allowedCapabilities'] = $allowedCapabilities;

        return $this;
    }

    /**
     * Gets defaultAddCapabilities
     * @return string[]
     */
    public function getDefaultAddCapabilities()
    {
        return $this->container['defaultAddCapabilities'];
    }

    /**
     * Sets defaultAddCapabilities
     * @param string[] $defaultAddCapabilities DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
     * @return $this
     */
    public function setDefaultAddCapabilities($defaultAddCapabilities)
    {
        $this->container['defaultAddCapabilities'] = $defaultAddCapabilities;

        return $this;
    }

    /**
     * Gets fsGroup
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1FSGroupStrategyOptions
     */
    public function getFsGroup()
    {
        return $this->container['fsGroup'];
    }

    /**
     * Sets fsGroup
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1FSGroupStrategyOptions $fsGroup FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * @return $this
     */
    public function setFsGroup($fsGroup)
    {
        $this->container['fsGroup'] = $fsGroup;

        return $this;
    }

    /**
     * Gets hostIPC
     * @return bool
     */
    public function getHostIPC()
    {
        return $this->container['hostIPC'];
    }

    /**
     * Sets hostIPC
     * @param bool $hostIPC hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     * @return $this
     */
    public function setHostIPC($hostIPC)
    {
        $this->container['hostIPC'] = $hostIPC;

        return $this;
    }

    /**
     * Gets hostNetwork
     * @return bool
     */
    public function getHostNetwork()
    {
        return $this->container['hostNetwork'];
    }

    /**
     * Sets hostNetwork
     * @param bool $hostNetwork hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * @return $this
     */
    public function setHostNetwork($hostNetwork)
    {
        $this->container['hostNetwork'] = $hostNetwork;

        return $this;
    }

    /**
     * Gets hostPID
     * @return bool
     */
    public function getHostPID()
    {
        return $this->container['hostPID'];
    }

    /**
     * Sets hostPID
     * @param bool $hostPID hostPID determines if the policy allows the use of HostPID in the pod spec.
     * @return $this
     */
    public function setHostPID($hostPID)
    {
        $this->container['hostPID'] = $hostPID;

        return $this;
    }

    /**
     * Gets hostPorts
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1HostPortRange[]
     */
    public function getHostPorts()
    {
        return $this->container['hostPorts'];
    }

    /**
     * Sets hostPorts
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1HostPortRange[] $hostPorts hostPorts determines which host port ranges are allowed to be exposed.
     * @return $this
     */
    public function setHostPorts($hostPorts)
    {
        $this->container['hostPorts'] = $hostPorts;

        return $this;
    }

    /**
     * Gets privileged
     * @return bool
     */
    public function getPrivileged()
    {
        return $this->container['privileged'];
    }

    /**
     * Sets privileged
     * @param bool $privileged privileged determines if a pod can request to be run as privileged.
     * @return $this
     */
    public function setPrivileged($privileged)
    {
        $this->container['privileged'] = $privileged;

        return $this;
    }

    /**
     * Gets readOnlyRootFilesystem
     * @return bool
     */
    public function getReadOnlyRootFilesystem()
    {
        return $this->container['readOnlyRootFilesystem'];
    }

    /**
     * Sets readOnlyRootFilesystem
     * @param bool $readOnlyRootFilesystem ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * @return $this
     */
    public function setReadOnlyRootFilesystem($readOnlyRootFilesystem)
    {
        $this->container['readOnlyRootFilesystem'] = $readOnlyRootFilesystem;

        return $this;
    }

    /**
     * Gets requiredDropCapabilities
     * @return string[]
     */
    public function getRequiredDropCapabilities()
    {
        return $this->container['requiredDropCapabilities'];
    }

    /**
     * Sets requiredDropCapabilities
     * @param string[] $requiredDropCapabilities RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * @return $this
     */
    public function setRequiredDropCapabilities($requiredDropCapabilities)
    {
        $this->container['requiredDropCapabilities'] = $requiredDropCapabilities;

        return $this;
    }

    /**
     * Gets runAsUser
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1RunAsUserStrategyOptions
     */
    public function getRunAsUser()
    {
        return $this->container['runAsUser'];
    }

    /**
     * Sets runAsUser
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1RunAsUserStrategyOptions $runAsUser runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     * @return $this
     */
    public function setRunAsUser($runAsUser)
    {
        $this->container['runAsUser'] = $runAsUser;

        return $this;
    }

    /**
     * Gets seLinux
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1SELinuxStrategyOptions
     */
    public function getSeLinux()
    {
        return $this->container['seLinux'];
    }

    /**
     * Sets seLinux
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1SELinuxStrategyOptions $seLinux seLinux is the strategy that will dictate the allowable labels that may be set.
     * @return $this
     */
    public function setSeLinux($seLinux)
    {
        $this->container['seLinux'] = $seLinux;

        return $this;
    }

    /**
     * Gets supplementalGroups
     * @return \UniversityOfAdelaide\OpenShift\Model\V1beta1SupplementalGroupsStrategyOptions
     */
    public function getSupplementalGroups()
    {
        return $this->container['supplementalGroups'];
    }

    /**
     * Sets supplementalGroups
     * @param \UniversityOfAdelaide\OpenShift\Model\V1beta1SupplementalGroupsStrategyOptions $supplementalGroups SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * @return $this
     */
    public function setSupplementalGroups($supplementalGroups)
    {
        $this->container['supplementalGroups'] = $supplementalGroups;

        return $this;
    }

    /**
     * Gets volumes
     * @return string[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     * @param string[] $volumes volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


