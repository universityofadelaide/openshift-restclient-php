<?php
/**
 * V1ObjectMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  UniversityOfAdelaide\OpenShift
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenShift API (with Kubernetes)
 *
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UniversityOfAdelaide\OpenShift\Model;

use \ArrayAccess;

/**
 * V1ObjectMeta Class Doc Comment
 *
 * @category    Class
 * @description ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 * @package     UniversityOfAdelaide\OpenShift
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1ObjectMeta implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1.ObjectMeta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annotations' => 'map[string,string]',
        'clusterName' => 'string',
        'creationTimestamp' => '\UniversityOfAdelaide\OpenShift\Model\V1Time',
        'deletionGracePeriodSeconds' => 'int',
        'deletionTimestamp' => '\UniversityOfAdelaide\OpenShift\Model\V1Time',
        'finalizers' => 'string[]',
        'generateName' => 'string',
        'generation' => 'int',
        'labels' => 'map[string,string]',
        'name' => 'string',
        'namespace' => 'string',
        'ownerReferences' => '\UniversityOfAdelaide\OpenShift\Model\V1OwnerReference[]',
        'resourceVersion' => 'string',
        'selfLink' => 'string',
        'uid' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'annotations' => 'annotations',
        'clusterName' => 'clusterName',
        'creationTimestamp' => 'creationTimestamp',
        'deletionGracePeriodSeconds' => 'deletionGracePeriodSeconds',
        'deletionTimestamp' => 'deletionTimestamp',
        'finalizers' => 'finalizers',
        'generateName' => 'generateName',
        'generation' => 'generation',
        'labels' => 'labels',
        'name' => 'name',
        'namespace' => 'namespace',
        'ownerReferences' => 'ownerReferences',
        'resourceVersion' => 'resourceVersion',
        'selfLink' => 'selfLink',
        'uid' => 'uid'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'annotations' => 'setAnnotations',
        'clusterName' => 'setClusterName',
        'creationTimestamp' => 'setCreationTimestamp',
        'deletionGracePeriodSeconds' => 'setDeletionGracePeriodSeconds',
        'deletionTimestamp' => 'setDeletionTimestamp',
        'finalizers' => 'setFinalizers',
        'generateName' => 'setGenerateName',
        'generation' => 'setGeneration',
        'labels' => 'setLabels',
        'name' => 'setName',
        'namespace' => 'setNamespace',
        'ownerReferences' => 'setOwnerReferences',
        'resourceVersion' => 'setResourceVersion',
        'selfLink' => 'setSelfLink',
        'uid' => 'setUid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'annotations' => 'getAnnotations',
        'clusterName' => 'getClusterName',
        'creationTimestamp' => 'getCreationTimestamp',
        'deletionGracePeriodSeconds' => 'getDeletionGracePeriodSeconds',
        'deletionTimestamp' => 'getDeletionTimestamp',
        'finalizers' => 'getFinalizers',
        'generateName' => 'getGenerateName',
        'generation' => 'getGeneration',
        'labels' => 'getLabels',
        'name' => 'getName',
        'namespace' => 'getNamespace',
        'ownerReferences' => 'getOwnerReferences',
        'resourceVersion' => 'getResourceVersion',
        'selfLink' => 'getSelfLink',
        'uid' => 'getUid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['clusterName'] = isset($data['clusterName']) ? $data['clusterName'] : null;
        $this->container['creationTimestamp'] = isset($data['creationTimestamp']) ? $data['creationTimestamp'] : null;
        $this->container['deletionGracePeriodSeconds'] = isset($data['deletionGracePeriodSeconds']) ? $data['deletionGracePeriodSeconds'] : null;
        $this->container['deletionTimestamp'] = isset($data['deletionTimestamp']) ? $data['deletionTimestamp'] : null;
        $this->container['finalizers'] = isset($data['finalizers']) ? $data['finalizers'] : null;
        $this->container['generateName'] = isset($data['generateName']) ? $data['generateName'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['ownerReferences'] = isset($data['ownerReferences']) ? $data['ownerReferences'] : null;
        $this->container['resourceVersion'] = isset($data['resourceVersion']) ? $data['resourceVersion'] : null;
        $this->container['selfLink'] = isset($data['selfLink']) ? $data['selfLink'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets annotations
     * @return map[string,string]
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     * @param map[string,string] $annotations Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets clusterName
     * @return string
     */
    public function getClusterName()
    {
        return $this->container['clusterName'];
    }

    /**
     * Sets clusterName
     * @param string $clusterName The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
     * @return $this
     */
    public function setClusterName($clusterName)
    {
        $this->container['clusterName'] = $clusterName;

        return $this;
    }

    /**
     * Gets creationTimestamp
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Time
     */
    public function getCreationTimestamp()
    {
        return $this->container['creationTimestamp'];
    }

    /**
     * Sets creationTimestamp
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Time $creationTimestamp CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
     * @return $this
     */
    public function setCreationTimestamp($creationTimestamp)
    {
        $this->container['creationTimestamp'] = $creationTimestamp;

        return $this;
    }

    /**
     * Gets deletionGracePeriodSeconds
     * @return int
     */
    public function getDeletionGracePeriodSeconds()
    {
        return $this->container['deletionGracePeriodSeconds'];
    }

    /**
     * Sets deletionGracePeriodSeconds
     * @param int $deletionGracePeriodSeconds Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     * @return $this
     */
    public function setDeletionGracePeriodSeconds($deletionGracePeriodSeconds)
    {
        $this->container['deletionGracePeriodSeconds'] = $deletionGracePeriodSeconds;

        return $this;
    }

    /**
     * Gets deletionTimestamp
     * @return \UniversityOfAdelaide\OpenShift\Model\V1Time
     */
    public function getDeletionTimestamp()
    {
        return $this->container['deletionTimestamp'];
    }

    /**
     * Sets deletionTimestamp
     * @param \UniversityOfAdelaide\OpenShift\Model\V1Time $deletionTimestamp DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
     * @return $this
     */
    public function setDeletionTimestamp($deletionTimestamp)
    {
        $this->container['deletionTimestamp'] = $deletionTimestamp;

        return $this;
    }

    /**
     * Gets finalizers
     * @return string[]
     */
    public function getFinalizers()
    {
        return $this->container['finalizers'];
    }

    /**
     * Sets finalizers
     * @param string[] $finalizers Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
     * @return $this
     */
    public function setFinalizers($finalizers)
    {
        $this->container['finalizers'] = $finalizers;

        return $this;
    }

    /**
     * Gets generateName
     * @return string
     */
    public function getGenerateName()
    {
        return $this->container['generateName'];
    }

    /**
     * Sets generateName
     * @param string $generateName GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency
     * @return $this
     */
    public function setGenerateName($generateName)
    {
        $this->container['generateName'] = $generateName;

        return $this;
    }

    /**
     * Gets generation
     * @return int
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     * @param int $generation A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets labels
     * @return map[string,string]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     * @param map[string,string] $labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     * @param string $namespace Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets ownerReferences
     * @return \UniversityOfAdelaide\OpenShift\Model\V1OwnerReference[]
     */
    public function getOwnerReferences()
    {
        return $this->container['ownerReferences'];
    }

    /**
     * Sets ownerReferences
     * @param \UniversityOfAdelaide\OpenShift\Model\V1OwnerReference[] $ownerReferences List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
     * @return $this
     */
    public function setOwnerReferences($ownerReferences)
    {
        $this->container['ownerReferences'] = $ownerReferences;

        return $this;
    }

    /**
     * Gets resourceVersion
     * @return string
     */
    public function getResourceVersion()
    {
        return $this->container['resourceVersion'];
    }

    /**
     * Sets resourceVersion
     * @param string $resourceVersion An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency
     * @return $this
     */
    public function setResourceVersion($resourceVersion)
    {
        $this->container['resourceVersion'] = $resourceVersion;

        return $this;
    }

    /**
     * Gets selfLink
     * @return string
     */
    public function getSelfLink()
    {
        return $this->container['selfLink'];
    }

    /**
     * Sets selfLink
     * @param string $selfLink SelfLink is a URL representing this object. Populated by the system. Read-only.
     * @return $this
     */
    public function setSelfLink($selfLink)
    {
        $this->container['selfLink'] = $selfLink;

        return $this;
    }

    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param string $uid UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\UniversityOfAdelaide\OpenShift\ObjectSerializer::sanitizeForSerialization($this));
    }
}


